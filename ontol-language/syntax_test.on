// SYNTAX TEST "Packages/ONTOL/ONTOL.sublime-syntax"

use 'some_domain' as some
// <- keyword.import.ontol
//  ^^^^^^^^^^^^^ string.package.ontol
//                ^^ keyword.import.as.ontol
//                   ^^^^ variable.ontol
use "some_domain" as some
//  ^^^^^^^^^^^^^ string.package.ontol

/// # This is a doc comment
// ^^^^^^^^^^^^^^^^^^^^^^^^^ comment.block.documentation.ontol
/// It can span several lines, contain **Markdown**,
/// and is connected to the statement below
pub def test {
// <- storage.modifier.pub.ontol
//  ^^^^ keyword.declaration.def.ontol
//       ^^^^
    rel .'id'|id: {
//      ^ variable.language.ontol
//  ^^^ keyword.declaration.rel.ontol
//       ^^^^ string.quoted.single.ontol
//           ^ keyword.operator.sigil.ontol
//            ^^ variable.function.ontol
//              ^ keyword.operator.sigil.ontol
        fmt '' => 'test--' => uuid => .
//      ^^^ keyword.declaration.fmt.ontol
//             ^^ keyword.operator.fatarrow.ontol
//                            ^^^^ storage.type.ontol
//                                    ^ variable.language.ontol
    }
    rel .'some_i64': i64
    rel .'some_string': string
    rel .'some_regex': regex
    rel .'some_unit': ()
//                    ^^ constant.language.ontol
    rel .'some_seq': []
//                   ^^ constant.language.ontol
    rel .'some.some_type': some.some_type
//                             ^ keyword.operator.sigil.ontol
}

def test {
// <- keyword.context.block.with.ontol
//   ^^^^
    rel .'three_oh_three': 303
//                         ^^^ constant.numeric.ontol
    rel .'p_value': 0.05
//                  ^^^^ constant.numeric.ontol
    rel .'infinity!': inf
//                    ^^^ constant.language.ontol
    rel .'ready?': true
//                 ^^^^ constant.language.ontol
    rel .'regex': /test\b.*test/
//                ^^^^^^^^^^^^^^ string.regexp.ontol
}

def testtest {
// <- keyword.declaration.def.ontol
//   ^^^^^^^^
}

map {
// <- keyword.declaration.map.ontol
    test {
        'some': [thing]
    }
    test_2 {
        'something': [..thing]
//                    ^^ keyword.operator.spread.ontol
    }
}

rel plays 'how_much': string
//                  ^ keyword.operator.ontol

rel artist ['plays']::['played_by'] instrument {
//                  ^^ keyword.operator.ontol
    rel .is: plays
//       ^^ variable.function.ontol
}
