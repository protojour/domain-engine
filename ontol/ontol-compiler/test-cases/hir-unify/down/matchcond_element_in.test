(struct ($c)
    (prop $c p@1:0:0
        (matrix (.. @e $a #u))
    )
    (prop $c p@1:0:1
        (matrix (.. @f $b #u))
    )
)

(matrix (.. @g
    (match-struct ($d)
        (prop $d p@2:0:0 element-in
            (matrix
                (.. @e
                    (struct ($q)
                        (prop $q p@3:0:0 $a)
                    )
                )
                (.. @f
                    (struct ($r)
                        (prop $r p@3:0:1 $b)
                    )
                )
            )
        )
    )
))

|$c| (block
    (let-prop-default [$e $s] ($c p@1:0:0) (make-seq) (make-seq))
    (let-prop-default [$f $t] ($c p@1:0:1) (make-seq) (make-seq))
    (match-struct ($u)
        (let-cond-var $d $u)
        (push-cond-clauses $u
            (root '$d)
        )
        (let-cond-var $v $u)
        (push-cond-clauses $u
            (match-prop '$d p@2:0:0 element-in '$v)
        )
        (for-each $e $s ($a $_)
            (let-cond-var $q $u)
            (push-cond-clauses $u
                (member '$v (_ '$q))
            )
            (let-cond-var $w $u)
            (push-cond-clauses $u
                (match-prop '$q p@3:0:0 element-in '$w)
                (member '$w (_ $a))
            )
        )
        (for-each $f $t ($b $_)
            (let-cond-var $r $u)
            (push-cond-clauses $u
                (member '$v (_ '$r))
            )
            (let-cond-var $x $u)
            (push-cond-clauses $u
                (match-prop '$r p@3:0:1 element-in '$x)
                (member '$x (_ $b))
            )
        )
    )
)
