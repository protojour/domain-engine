(struct ($e)
    (prop! $e p@1:0:0
        (struct ($f)
            (prop! $f p@2:0:0
                (matrix (.. @a #u $b))
            )
        )
    )
    (prop! $e p@1:0:1
        (matrix (.. @c #u $d))
    )
)

// Note: The expr prop p@3:0 itself does not depend on anything in scope.
// So it's constant in this sense, but each _child_ need to _clone_ the original scope.
(struct ($g)
    (prop! $g p@3:0:0
        (struct ($h)
            (prop! $h p@4:0:0
                (struct ($i)
                    (prop! $i p@5:0:0
                        (matrix (.. @a #u $b))
                    )
                )
            )
            (prop! $h p@4:0:1
                (matrix (.. @c #u $d))
            )
        )
    )
)

|$e| (block
    (let-prop $f ($e p@1:0:0))
    (let-prop [$a $j] ($f p@2:0:0))
    (let-prop [$c $k] ($e p@1:0:1))
    (struct ($g)
        (prop! $g p@3:0:0
            (struct ($h)
                (prop! $h p@4:0:0
                    (struct ($i)
                        (prop! $i p@5:0:0
                            (make-matrix ($l $m)
                                (for-each $a $j ($_ $b)
                                    (insert $l #u)
                                    (insert $m $b)
                                )
                            )
                        )
                    )
                )
                (prop! $h p@4:0:1
                    (make-matrix ($n $o)
                        (for-each $c $k ($_ $d)
                            (insert $n #u)
                            (insert $o $d)
                        )
                    )
                )
            )
        )
        (move-rest-attrs $g $e)
    )
)
