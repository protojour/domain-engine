use proc_macro::TokenStream;
use quote::quote;
use syn::parse_macro_input;

mod ontol_debug;

#[proc_macro_derive(OntolDebug)]
pub fn derive_ontol_debug(input: TokenStream) -> TokenStream {
    let output = ontol_debug::derive(parse_macro_input!(input as syn::Item));
    TokenStream::from(output)
}

/// Init tracing before a test is run.
///
/// This init code is shorter than the one generated by https://docs.rs/test-log/.
#[proc_macro_attribute]
pub fn test(attr: TokenStream, item: TokenStream) -> TokenStream {
    let syn::ItemFn {
        attrs,
        vis,
        sig,
        mut block,
    } = parse_macro_input!(item as syn::ItemFn);

    let test_attr = if attr.is_empty() {
        quote! { ::core::prelude::v1::test }
    } else {
        attr.into()
    };

    let tracing_init = quote! {
        let _ = ::tracing_subscriber::FmtSubscriber::builder()
            .with_env_filter(::tracing_subscriber::EnvFilter::from_default_env())
            .with_test_writer()
            .try_init();
    };

    block.stmts.insert(0, syn::parse_quote!(#tracing_init));

    let out = quote! {
        #[#test_attr]
        #(#attrs)*
        #vis #sig #block
    };

    TokenStream::from(out)
}
