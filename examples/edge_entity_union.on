/// This example shows how to model a hybrid between an entity and and edge.
domain 01J2QAP8H1WWPA8A3QB8NKEGZE ()

sym { id }

edge linkage {
    (src) related_to: (target) with_link: (ln),
    (target) related_from: (src) with_link: (ln),
    (ln) from: (src),
    (ln) to: (target),
}

def foo_id (fmt '' => 'foo/' => serial => .)
def bar_id (fmt '' => 'bar/' => serial => .)
def baz_id (fmt '' => 'baz/' => serial => .)
def qux_id (fmt '' => 'qux/' => serial => .)

def foo (
    rel. id: foo_id
    rel* linkage.related_to: {baz|qux}
)
def bar (
    rel. id: bar_id
    rel* linkage.related_to: {baz|qux}
)
def baz (
    rel. id: baz_id
    rel* linkage.related_from: {foo|bar}
)
def qux (
    rel. id: qux_id
    rel* 'qux_field': text
    rel* linkage.related_from: {foo|bar}
)

/// This definition is both an entity in its own right and an edge
def link (
    rel. id: (fmt '' => 'link/' => serial => .)
    rel* linkage.from: foo_id|bar_id
    rel* linkage.to: baz_id|qux_id
)

map foos(
    (),
    foo { ..@match foo() }
)

map links(
    (),
    link { ..@match link() }
)
