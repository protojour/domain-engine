domain 01H2AQNH6RZ40ANSPN6WR39TXY ()

// -----------------------------------
// database

/// Item type enum
def @private ItemType (
    /// worthless junk
    rel* is?: 'worthless junk'
    /// ancient treasure
    rel* is?: 'ancient treasure'
    /// alien artifact
    rel* is?: 'alien artifact'
)
def @private archive_item (
    rel. 'id': (fmt '' => 'archive_item/' => uuid => .)
    rel* 'created': datetime
    rel* 'updated': datetime
    rel* 'archived': datetime
    rel* 'name': text
    rel* 'description': text
    rel* 'asset_score': i64
    rel* 'type': ItemType
    rel* db_linkage.archive_groups: {archive_group}
)
def @private archive_group (
    rel. 'id': (fmt '' => 'archive_group/' => uuid => .)
    rel* 'created': datetime
    rel* 'updated': datetime
    rel* 'archived': datetime
    rel* 'name': text
    rel* 'description': text
    rel* 'start_date': datetime
    rel* 'end_date': datetime
    rel* db_linkage.archive_items: {archive_item}
)
edge db_linkage {
    (g) archive_items: (i),
    (i) archive_groups: (g),
}

// -----------------------------------
// public API

/// Common dates for Archive entities
def ArchiveDates (
    /// The (estimated) date the archived object was created
    rel* 'createdAt': datetime
    /// The date the archived object was last updated
    rel* 'updatedAt': datetime
    /// The date the archived object was entered into the collection
    rel* 'archivedAt': datetime
)
/// ## An Archived Object
/// Comments support [Markdown](https://www.markdownguide.org/)
def ArchiveObject (
    /// ID of the object
    rel. 'id': (fmt '' => 'archive_item/' => uuid => .)
    /// Relevant dates for the object
    rel* 'dates': ArchiveDates
    /// Name of the object
    rel* 'name': text
    /// Description of the object
    rel* 'description': text
    /// Relative value of the object
    rel* 'assetScoreTimesTen': i64
    /// Classification of the object
    rel* 'kind': ItemType
    /// Relation between ArchiveObject and ArchiveCollection
    rel* archive_linkage.archiveCollections: {ArchiveCollection}
)
/// ## An Archived Object Collection
/// A collection of archived objects
def ArchiveCollection (
    /// ID of the collection
    rel. 'id': (fmt '' => 'archive_group/' => uuid => .)
    /// Relevant dates for the collection
    rel* 'dates': ArchiveDates
    /// Name of the collection
    rel* 'name': text
    /// Description of the collection
    rel* 'description': text
    /// Start date; earliest (estimated)
    /// creation date of object in collection
    rel* 'startDate': datetime
    /// Start date; latest (estimated)
    /// creation date of object in collection
    rel* 'endDate': datetime
    /// Relation between ArchiveCollections and ArchiveObjects
    rel* archive_linkage.archiveObjects: {ArchiveObject}
)

/// a virtual (non-persisted) edge
edge archive_linkage {
    (c) archiveObjects: (o),
    (o) archiveCollections: (c),
}

// TODO: should lower the "virtual edge" archive_linkage
// to a persisted edge
// map(archive_linkage, db_linkage)

map(
    // variables for mapping values between
    // map arms are created as needed
    ArchiveObject(
        // values can be remapped structurally
        'id': id,
        'dates': ArchiveDates(
            'createdAt': cr,
            'updatedAt': up,
            'archivedAt': ar,
        ),
        'name': n,
        'description': d,
        // ONTOL supports many transformations
        // the inverse transformation is applied automatically
        'assetScoreTimesTen': s * 10,
        'kind': t,
    ),
    // variables must all be used
    // and correspond between map arms
    archive_item(
        'id': id,
        'created': cr,
        'updated':  up,
        'archived': ar,
        'name': n,
        'description': d,
        'asset_score': s,
        'type': t,
    ),
)

map(
    ArchiveCollection(
        'id': id,
        'dates': ArchiveDates(
            'createdAt': cr,
            'updatedAt': up,
            'archivedAt': ar,
        ),
        'name': n,
        'description': d,
        'startDate': sd,
        'endDate': ed,
        archive_linkage.archiveObjects: {..ai}
    ),
    archive_group(
        'id': id,
        'created': cr,
        'updated': up,
        'archived': ar,
        'name': n,
        'description': d,
        'start_date': sd,
        'end_date': ed,
        // the previous map is reused here
        db_linkage.archive_items: {..ai},
    ),
)
