
def Repository (
    rel .'id'[rel .gen: auto]|id: (rel .is: uuid)
    rel .'handle': text
    rel {.}'owner'::'repositories' RepositoryOwner
    rel .'origin'?: .
)

def RepositoryOwner (
    rel .is?: User
    rel .is?: Organization
)

def User (
    rel .'id'|id: (fmt '' => 'user/' => text => .)
    rel .'email': text
)

def Organization (
    rel .'id'|id: (fmt '' => 'org/' => text => .)
    rel {.}'members'[rel .is: OrganizationMember]::'member_of' {User}
)

def OrganizationMember (
    rel .'role': text
)

map users(
    (
        'ids'?: { ..id },
    ),
    User: {
        ..User match(
            'id'?: in { ..id },
            // TODO: We want to test a filter that uses 'repositories',
            // but it's a bit complicated since it involves a union.
        ),
    }
)

map organizations(
    (),
    Organization: {
        ..Organization match(),
    }
)

map repositories(
    (),
    Repository: {
        ..Repository match(),
    }
)