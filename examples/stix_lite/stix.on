// Protojour note: See various FIXME notes in this file.

use 'stix_common' as common
use 'stix_meta' as meta
use 'stix_open_vocab' as ov

use 'SI' as SI

/// An `identifier` uniquely identifies a STIX Object and MAY do so in a deterministic way.
/// A deterministic identifier means that the identifier generated by more than one producer for the exact same STIX Object using the same namespace, "ID Contributing Properties", and UUID method will have the exact same identifier value.
///
/// All identifiers, excluding those used in the deprecated Cyber Observable Container, MUST follow the form `object-type--UUID`, where object-type is the exact value (all type names are lowercase strings, by definition) from the type property of the object being identified or referenced and where the UUID MUST be an RFC 4122-compliant UUID. 
///
/// The UUID part of the identifier MUST be unique across all objects produced by a given producer regardless of the type identified by the object-type prefix.
/// Meaning, a producer MUST NOT reuse the UUID portion of the identifier for objects of different types.
///
/// STIX Domain Objects, STIX Relationship Objects, STIX Meta Objects, and STIX Bundle Object SHOULD use UUIDv4 for the UUID portion of the identifier.
/// Producers using something other than UUIDv4 need to be mindful of potential collisions and should use a namespace that guarantees uniqueness, however, they MUST NOT use a namespace of `00abedb4-aa42-466c-9c01-fed23315a9b7` if generating a UUIDv5.
///
/// STIX Cyber-observable Objects SHOULD use UUIDv5 for the UUID portion of the identifier and the UUID portion of the UUIDv5-based identifier SHOULD be generated according to the following rules:
/// * The namespace SHOULD be `00abedb4-aa42-466c-9c01-fed23315a9b7`
/// * The value of the name portion SHOULD be the list of "ID Contributing Properties" defined on each SCO and those properties SHOULD be stringified according to JCS to ensure a canonical representation of the JSON data.
/// * Producers not following these rules MUST NOT use a namespace of `00abedb4-aa42-466c-9c01-fed23315a9b7`.
///
/// STIX Cyber-observable Objects that are used in the deprecated Cyber Observable Container MAY use any string value for the identifier.
/// For the deprecated Cyber Observable Container, it is common for implementers to use simple numerical strings for these identifiers (e.g., "0", "1", "2", etc).
/// See section 2.13 for more information.
///
/// * These identifiers, when used inside the deprecated Cyber-observable Objects Container specify a local reference to a Cyber-observable Object.
///   These references MUST be valid within the local scope of the Cyber Observable Container (observable-container) that holds both the source Cyber-observable Object and the Cyber-observable Object that it references.
/// * These identifiers SHOULD be a non-negative monotonically increasing integer, incrementing by 1 from a starting value of 0, and represented as a string within the JSON MTI serialization. However, implementers MAY elect to use an alternate key format if necessary.
///
/// Using Identifiers:
/// 
/// Consumers of STIX Cyber Threat Intelligence that are processing the objects property of an Observed-Data object can assume that the identifier is an old deprecated Cyber Observable Container identifier.
/// Consumers can also inspect the identifier to see if it contains an object-type, if not, they can assume that it is a deprecated Cyber Observable Container identifier.
/// If it does have an object-type and it matches a SCO, then chances are it is a UUIDv5 deterministic identifier, but this can be verified by inspecting the UUID portion of the identifier.
/// RFC 4122 defines how one can distinguish between a UUIDv4 and UUIDv5 value. 
///
/// The JSON MTI serialization uses the JSON String type [RFC8259] when representing identifier.
def sdo_identifier ()

def attack-pattern-id (
    fmt '' => 'attack-pattern--' => uuid => .
    rel sdo_identifier is?: .
)

def campaign-id (
    fmt '' => 'campaign--' => uuid => .
    rel sdo_identifier is?: .
)

def course-of-action-id (
    fmt '' => 'course-of-action--' => uuid => .
    rel sdo_identifier is?: .
)

def grouping-id (
    fmt '' => 'grouping--' => uuid => .
    rel sdo_identifier is?: .
)

def identity-id (
    fmt '' => 'identity--' => uuid => .
    rel sdo_identifier is?: .
)

def indicator-id (
    fmt '' => 'indicator--' => uuid => .
    rel sdo_identifier is?: .
)

def infrastructure-id (
    fmt '' => 'infrastructure--' => uuid => .
    rel sdo_identifier is?: .
)

def intrusion-set-id (
    fmt '' => 'intrusion-set--' => uuid => .
    rel sdo_identifier is?: .
)

def location-id (
    fmt '' => 'location--' => uuid => .
    rel sdo_identifier is?: .
)

def malware-id (
    fmt '' => 'malware--' => uuid => .
    rel sdo_identifier is?: .
)

def malware-analysis-id (
    fmt '' => 'malware-analysis--' => uuid => .
    rel sdo_identifier is?: .
)

def note-id (
    fmt '' => 'note--' => uuid => .
    rel sdo_identifier is?: .
)

def observed-data-id (
    fmt '' => 'observed-data--' => uuid => .
    rel sdo_identifier is?: .
)

def opinion-id (
    fmt '' => 'opinion--' => uuid => .
    rel sdo_identifier is?: .
)

def report-id (
    fmt '' => 'report--' => uuid => .
    rel sdo_identifier is?: .
)

def threat-actor-id (
    fmt '' => 'threat-actor--' => uuid => .
    rel sdo_identifier is?: .
)

def tool-id (
    fmt '' => 'tool--' => uuid => .
    rel sdo_identifier is?: .
)

def vulnerability-id (
    fmt '' => 'vulnerability--' => uuid => .
    rel sdo_identifier is?: .
)

/// The identifier of a `marking-defifition`
def marking-definition-id (
    fmt '' => 'marking-definition--' => uuid => .
    rel sdo_identifier is?: .
)

def artifact-id (
    fmt '' => 'artifact--' => uuid => .
    rel sdo_identifier is?: .
)

def autonomous-system-id (
    fmt '' => 'autonomous-system--' => uuid => .
    rel sdo_identifier is?: .
)

def directory-id (
    fmt '' => 'directory-id--' => uuid => .
    rel sdo_identifier is?: .
)

def domain-name-id (
    fmt '' => 'domain-name--' => uuid => .
    rel sdo_identifier is?: .
)

def email-addr-id (
    fmt '' => 'email-addr--' => uuid => .
    rel sdo_identifier is?: .
)

def email-message-id (
    fmt '' => 'email-message--' => uuid => .
    rel sdo_identifier is?: .
)

def file-id (
    fmt '' => 'file--' => uuid => .
    rel sdo_identifier is?: .
)

def ipv4-addr-id (
    fmt '' => 'ipv4-addr--' => uuid => .
    rel sdo_identifier is?: .
)

def ipv6-addr-id (
    fmt '' => 'ipv6-addr--' => uuid => .
    rel sdo_identifier is?: .
)

def mac-addr-id (
    fmt '' => 'mac-addr--' => uuid => .
    rel sdo_identifier is?: .
)

def mutex-id (
    fmt '' => 'mutex--' => uuid => .
    rel sdo_identifier is?: .
)

def network-traffic-id (
    fmt '' => 'network-traffic--' => uuid => .
    rel sdo_identifier is?: .
)

def process-id (
    fmt '' => 'process--' => uuid => .
    rel sdo_identifier is?: .
)

def software-id (
    fmt '' => 'software--' => uuid => .
    rel sdo_identifier is?: .
)

def url-id (
    fmt '' => 'url--' => uuid => .
    rel sdo_identifier is?: .
)

def user-account-id (
    fmt '' => 'user-account--' => uuid => .
    rel sdo_identifier is?: .
)

def windows-registry-key-id (
    fmt '' => 'windows-registry-key--' => uuid => .
    rel sdo_identifier is?: .
)

def x509-certificate-id (
    fmt '' => 'x509-certificate-key--' => uuid => .
    rel sdo_identifier is?: .
)

def relationship-id (
    fmt '' => 'relationship--' => uuid => .
)

def sdo_sco_identifier (
    rel .is: sdo_identifier
)

/// Type providing the `created_by_ref` property
def created_by_object (
    /// The **created_by_ref** property specifies the **id** property of the `identity` object that describes the entity that created this object.
    ///
    /// If this attribute is omitted, the source of this information is undefined. This may be used by object creators who wish to remain anonymous.
    rel .'created_by_ref'?: identity-id
)

// FIXME: This type has union-like properties:
def granular-marking (
    /// The **lang** property identifies the language of the text identified by this marking.
    /// The value of the lang property, if present, **MUST** be an [[RFC5646](https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#kix.1js008hntuzu)] language code.
    ///
    /// If the **marking_ref** property is not present, this property **MUST** be present. If the marking_ref property is present, this property **MUST NOT** be present.
    rel .'lang'?: common.lang-rfc5646

    /// The **marking_ref** property specifies the ID of the `marking-definition` object that describes the marking.
    ///
    /// If the **lang** property is not present, this property **MUST** be present.
    /// If the **lang** property is present, this property **MUST NOT** be present.
    rel .'marking_ref'?: marking-definition-id

    /// The selectors property specifies a list of selectors for content contained within the STIX Object in which this property appears.
    /// Selectors **MUST** conform to the syntax defined below.
    ///
    /// The `marking-definition` referenced in the **marking_ref** property is applied to the content selected by the selectors in this list.
    ///
    /// The [[RFC5646](https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#kix.1js008hntuzu)] language code specified by the lang property is applied to the content selected by the selectors in this list.
    rel .'selectors': {common.string}
)

def stix_markings_object (
    /// The **object_marking_refs** property specifies a list of id properties of marking-definition objects that apply to this object.
    ///
    /// In some cases, though uncommon, marking definitions themselves may be marked with sharing or handling guidance.
    /// In this case, this property **MUST NOT** contain any references to the same Marking Definition object (i.e., it cannot contain any circular references).
    ///
    /// See section [7.2](https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_95gfoglikdzh) for further definition of data markings.
    rel .'object_marking_refs'?: {marking-definition-id}

    /// The **granular_markings** property specifies a list of granular markings applied to this object.
    ///
    /// In some cases, though uncommon, marking definitions themselves may be marked with sharing or handling guidance.
    /// In this case, this property **MUST NOT** contain any references to the same Marking Definition object (i.e., it cannot contain any circular references).
    ///
    /// See section [7.2](https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_95gfoglikdzh) for further definition of data markings.
    rel .'granular_markings'?: {granular-marking}
)


/// STIX defines a set of STIX Domain Objects (SDOs): Attack Pattern, Campaign, Course of Action, Grouping, Identity, Indicator, Infrastructure, Intrusion Set, Location, Malware, Malware Analysis, Note, Observed Data, Opinion, Report, Threat Actor, Tool, and Vulnerability.
/// Each of these objects corresponds to a concept commonly used in CTI.
///
/// STIX Domain Objects are defined in section 4.
def stix_domain_object (
    rel .is: meta.spec_version_object
    rel .is: meta.created_modified_object
    rel .is: meta.confidence_object
    rel .is: meta.revoked_object
    rel .is: meta.labels_object
    rel .is: meta.lang_object
    rel .is: meta.external_references_object

    rel .is: created_by_object
    rel .is: stix_markings_object
)

/// STIX Relationship Objects (SROs) represent types of relationships used to describe CTI.
/// The Generic Relationship SRO is used to describe many varied types of relationships, while the specific Sighting SRO contains additional properties to represent Sighting relationships.
///
/// Property information, relationship information, and examples are provided for each SRO defined below.
/// Property information includes common properties as well as properties that are specific to each SRO.
/// Because SROs cannot be the source or target of other SROs, relationship information is included but only to describe embedded relationships (e.g., `created_by_ref`).
def stix_relationship_object (
    rel .is: meta.spec_version_object
    rel .is: meta.created_modified_object
    rel .is: meta.confidence_object
    rel .is: meta.revoked_object
    rel .is: meta.labels_object
    rel .is: meta.lang_object
    rel .is: meta.external_references_object

    rel .is: created_by_object
    rel .is: stix_markings_object
)

/// STIX Cyber Observable Object (SCO)
def stix_cyber_observable_object (
    rel .is: meta.defanged_object

    rel .is: stix_markings_object
)

/// Attack Patterns are a type of TTP that describe ways that adversaries attempt to compromise targets.
def attack-pattern (
    rel .is: stix_domain_object
    rel .'type': 'attack-pattern'
    rel .'id'(rel .gen: auto)|id: attack-pattern-id

    /// A name used to identify the Attack Pattern.
    rel .'name': common.string

    /// A description that provides more details and context about the Attack Pattern, potentially including its purpose and its key characteristics.
    rel .'description'?: common.string

    /// Alternative names used to identify this Attack Pattern.
    rel .'aliases'?: {common.string}

    /// The list of Kill Chain Phases for which this Attack Pattern is used.
    rel .'kill_chain_phases'?: {common.kill-chain-phase}
)

/// A Campaign is a grouping of adversarial behaviors that describes a set of malicious activities or attacks (sometimes called waves) that occur over a period of time against a specific set of targets.
/// Campaigns usually have well defined objectives and may be part of an Intrusion Set.
/// 
/// Campaigns are often attributed to an intrusion set and threat actors.
/// The threat actors may reuse known infrastructure from the intrusion set or may set up new infrastructure specific for conducting that campaign.
/// 
/// Campaigns can be characterized by their objectives and the incidents they cause, people or resources they target, and the resources (infrastructure, intelligence, Malware, Tools, etc.) they use.
/// 
/// For example, a Campaign could be used to describe a crime syndicate's attack using a specific variant of malware and new C2 servers against the executives of ACME Bank during the summer of 2016 in order to gain secret information about an upcoming merger with another bank.
def campaign (
    rel .is: stix_domain_object
    rel .'type': 'campaign'
    rel .'id'(rel .gen: auto)|id: campaign-id

    /// A name used to identify the Campaign.
    rel .'name': common.string

    /// A description that provides more details and context about the Campaign, potentially including its purpose and its key characteristics.
    rel .'description'?: common.string

    /// Alternative names used to identify this Campaign
    rel .'aliases'?: {common.string}

    /// The time that this Campaign was first seen.
    /// 
    /// This property is a summary property of data from sightings and other data that may or may not be available in STIX.
    /// If new sightings are received that are earlier than the first seen timestamp, the object may be updated to account for the new data.
    rel .'first_seen'?: common.timestamp

    /// The time that this Campaign was last seen.
    ///
    /// This property is a summary property of data from sightings and other data that may or may not be available in STIX.
    /// If new sightings are received that are later than the last seen timestamp, the object may be updated to account for the new data.
    ///
    /// This MUST be greater than or equal to the timestamp in the first_seen property.
    rel .'last_seen'?: common.timestamp

    /// This property defines the Campaign’s primary goal, objective, desired outcome, or intended effect — what the Threat Actor or Intrusion Set hopes to accomplish with this Campaign.
    rel .'objective'?: common.string
)

/// A Course of Action (CoA) is a recommendation from a producer of intelligence to a consumer on the actions that they might take in response to that intelligence.
/// The CoA may be preventative to deter exploitation or corrective to counter its potential impact.
/// The CoA may describe automatable actions (applying patches, configuring firewalls, etc.), manual processes, or a combination of the two.
/// For example, a CoA that describes how to remediate a vulnerability could describe how to apply the patch that removes that vulnerability.
///
/// The CoA includes the encoded content of an action or a reference to an externally defined action identified by the action_type property. 
def course-of-action (
    rel .is: stix_domain_object
    rel .'type': 'course-of-action'
    rel .'id'(rel .gen: auto)|id: course-of-action-id

    /// A name used to identify the Course of Action.
    rel .'name': common.string

    /// A description that provides more details and context about the Course of Action, potentially including its purpose and its key characteristics.
    /// In some cases, this property may contain the actual course of action in prose text.
    rel .'description'?: common.string

    /// The type of action that is included in either the action_bin property or the dereferenced content from the action_reference property.
    ///
    /// For example: `textual:text/plain`
    ///
    /// This is an open vocabulary and values SHOULD come from the `course-of-action-type-ov` vocabulary.
    rel .'action_type'?: ov.course-of-action-type-ov

    /// A recommendation on the operating system(s) that this course of action can be applied to.
    ///
    /// If no os_execution_envs are defined, the operating systems for the action specified by the action_type property are undefined, or the specific operating system has no impact on the execution of the course of action (e.g., power off system). 
    ///
    /// Each string value for this property SHOULD be a CPE v2.3 entry from the official NVD CPE Dictionary [NVD](https://docs.oasis-open.org/cti/stix/v2.1/csprd01/stix-v2.1-csprd01.html#kix.9x7meqegw59o).
    /// This property MAY include custom values including values taken from other standards such as SWID [SWID](https://docs.oasis-open.org/cti/stix/v2.1/csprd01/stix-v2.1-csprd01.html#e6jwio14q2q4).
    ///
    /// Example:
    /// ```
    /// [
    ///     cpe:2.3:o:microsoft:windows_10:*:*:*:*:*:*:x86:*,
    ///     cpe:2.3:o:microsoft:windows_10:*:*:*:*:*:*:x64:*
    /// ]
    /// ```
    ///
    /// This example means that any version of the Windows 10 operating system is able to process and use the course of action defined in the **action_bin** or **action_reference** properties.
    rel .'os_execution_envs'?: {common.string}

    /// This property contains the base64 encoded "commands" that represent the action for this Course of Action.
    ///
    /// This property MUST NOT be present if action_reference is provided.
    rel .'action_bin'?: common.binary

    /// The value of this property MUST be a valid external reference that resolves to the action content as defined by the action_type property.
    ///
    /// This property MUST NOT be present if action_bin is provided.
    rel .'action_reference'?: common.external-reference
)

/// A Grouping object explicitly asserts that the referenced STIX Objects have a shared context, unlike a STIX Bundle (which explicitly conveys no context).
/// A Grouping object should not be confused with an intelligence product, which should be conveyed via a STIX Report.
///
/// A STIX Grouping object might represent a set of data that, in time, given sufficient analysis, would mature to convey an incident or threat report as a STIX Report object.
/// For example, a Grouping could be used to characterize an ongoing investigation into a security event or incident.
/// A Grouping object could also be used to assert that the referenced STIX Objects are related to an ongoing analysis process, such as when a threat analyst is collaborating with others in their trust community to examine a series of Campaigns and Indicators. The Grouping SDO contains a list of references to SDOs, SCOs, and SROs, along with an explicit statement of the context shared by the content, a textual description, and the name of the grouping.
def grouping (
    rel .is: stix_domain_object
    rel .'type': 'grouping'
    rel .'id'(rel .gen: auto)|id: grouping-id

    /// A name used to identify the Grouping.
    rel .'name': common.string

    /// A description that provides more details and context about the Grouping, potentially including its purpose and its key characteristics.
    rel .'description'?: common.string

    /// A short descriptor of the particular context shared by the content referenced by the Grouping.
    ///
    /// This is an open vocabulary and values SHOULD come from the `grouping-context-ov` vocabulary.
    rel .'context': ov.grouping-context-ov

    rel .'object_refs': {sdo_identifier}
)

/// Identities can represent actual individuals, organizations, or groups (e.g., ACME, Inc.) as well as classes of individuals, organizations, systems or groups (e.g., the finance sector).
///
/// The Identity SDO can capture basic identifying information, contact information, and the sectors that the Identity belongs to. Identity is used in STIX to represent, among other things, targets of attacks, information sources, object creators, and threat actor identities.
def identity (
    rel .is: stix_domain_object
    rel .'type': 'identity'
    rel .'id'(rel .gen: auto)|id: identity-id

    /// The name of this Identity.
    /// When referring to a specific entity (e.g., an individual or organization), this property SHOULD contain the canonical name of the specific entity.
    rel .'name': common.string

    /// A description that provides more details and context about the Identity, potentially including its purpose and its key characteristics.
    rel .'description'?: common.string

    /// The list of roles that this Identity performs (e.g., CEO, Domain Administrators, Doctors, Hospital, or Retailer).
    /// No open vocabulary is yet defined for this property.
    rel .'roles'?: {common.string}

    /// The type of entity that this Identity describes, e.g., an individual or organization.
    /// This is an open vocabulary and the values SHOULD come from the `identity-class-ov` vocabulary.
    rel .'identity_class': ov.identity-class-ov

    /// The list of industry sectors that this Identity belongs to.
    /// This is an open vocabulary and values SHOULD come from the `industry-sector-ov` vocabulary. 
    rel .'sectors'?: {ov.industry-sector-ov}

    /// The contact information (e-mail, phone number, etc.) for this Identity.
    /// No format for this information is currently defined by this specification.
    rel .'contact_information'?: common.string
)

def indicator (
    rel .is: stix_domain_object
    rel .'type': 'indicator'
    rel .'id'(rel .gen: auto)|id: indicator-id

    /// A name used to identify the Indicator.
    ///
    /// Producers SHOULD provide this property to help products and analysts understand what this Indicator actually does.
    rel .'name'?: common.string

    /// A description that provides more details and context about the Indicator, potentially including its purpose and its key characteristics.
    ///
    /// Producers SHOULD provide this property to help products and analysts understand what this Indicator actually does.
    rel .'description'?: common.string

    /// This property is an open vocabulary that specifies a set of categorizations for this indicator.
    ///
    /// This is an open vocabulary and values SHOULD come from the indicator-type-ov vocabulary.
    rel .'indicator-types': {ov.indicator-type-ov}

    /// The detection pattern for this Indicator is a STIX Pattern as specified in section 9.
    rel .'pattern': common.string

    /// The type of pattern used in this indicator.
    /// The property is an open vocabulary and currently has the values of `stix`, `snort`, and `yara`.
    rel .'pattern_type': ov.pattern-type-ov

    /// The version of the pattern that is used.
    /// For patterns that do not have a formal specification, the build or code version that the pattern is known to work with SHOULD be used.
    rel .'pattern_version'?: common.string

    /// The time from which this Indicator is considered a valid indicator of the behaviors it is related or represents.
    rel .'valid_from': common.timestamp

    /// The time at which this Indicator should no longer considered a valid indicator of the behaviors it is related to or represents.
    ///
    /// If the valid_until property is omitted, then there is no constraint on the latest time for which the Indicator is valid.
    ///
    /// This MUST be greater than the timestamp in the valid_from property.
    rel .'valid_until'?: common.timestamp

    /// The kill chain phase(s) to which this Indicator corresponds.
    rel .'kill_chain_phases'?: {common.kill-chain-phase}
)

/// The Infrastructure SDO represents a type of TTP and describes any systems, software services and any associated physical or virtual resources intended to support some purpose (e.g., C2 servers used as part of an attack, device or server that are part of defence, database servers targeted by an attack, etc.).
/// While elements of an attack can be represented by other SDOs or SCOs, the Infrastructure SDO represents a named group of related data that constitutes the infrastructure.
def infrastructure (
    rel .is: stix_domain_object
    rel .'type': 'infrastructure'
    rel .'id'(rel .gen: auto)|id: infrastructure-id

    /// A name or characterizing text used to identify the Infrastructure.
    rel .'name': common.string

    /// A description that provides more details and context about the Infrastructure, potentially including its purpose, how it is being used, how it relates to other intelligence activities captured in related objects, and its key characteristics.
    rel .'description'?: common.string

    /// The type of infrastructure being described.
    /// This is an open vocabulary and values SHOULD come from the `infrastructure-type-ov` vocabulary.
    rel .'infrastructure_types': {ov.infrastructure-type-ov}

    /// Alternative names used to identify this Infrastructure.
    rel .'aliases'?: {common.string}

    /// The list of Kill Chain Phases for which this Infrastructure is used.
    rel .'kill_chain_phases'?: {common.kill-chain-phase}

    /// The time that this Infrastructure was first seen performing malicious activities.
    rel .'first_seen'?: common.timestamp

    /// The time that this Infrastructure was last seen performing malicious activities.
    ///
    /// If this property and the first_seen property are both defined, then this property MUST be greater than or equal to the timestamp in the first_seen property.
    rel .'last_seen'?: common.timestamp
)

/// An Intrusion Set is a grouped set of adversarial behaviors and resources with common properties that is believed to be orchestrated by a single organization.
/// An Intrusion Set may capture multiple Campaigns or other activities that are all tied together by shared attributes indicating a common known or unknown Threat Actor.
/// New activity can be attributed to an Intrusion Set even if the Threat Actors behind the attack are not known.
/// Threat Actors can move from supporting one Intrusion Set to supporting another, or they may support multiple Intrusion Sets.
///
/// Where a Campaign is a set of attacks over a period of time against a specific set of targets to achieve some objective, an Intrusion Set is the entire attack package and may be used over a very long period of time in multiple Campaigns to achieve potentially multiple purposes.
///
/// While sometimes an Intrusion Set is not active, or changes focus, it is usually difficult to know if it has truly disappeared or ended.
/// Analysts may have varying level of fidelity on attributing an Intrusion Set back to Threat Actors and may be able to only attribute it back to a nation state or perhaps back to an organization within that nation state.
def intrusion-set (
    rel .is: stix_domain_object
    rel .'type': 'intrusion-set'
    rel .'id'(rel .gen: auto)|id: intrusion-set-id

    /// A name used to identify this Intrusion Set.
    rel .'name': common.string

    /// A description that provides more details and context about the Intrusion Set, potentially including its purpose and its key characteristics.
    rel .'description'?: common.string

    /// Alternative names used to identify this Intrusion Set.
    rel .'aliases'?: {common.string}

    /// The time that this Intrusion Set was first seen.
    ///
    /// This property is a summary property of data from sightings and other data that may or may not be available in STIX.
    /// If new sightings are received that are earlier than the first seen timestamp, the object may be updated to account for the new data.
    rel .'first_seen'?: common.timestamp

    /// The time that this Intrusion Set was last seen.
    ///
    /// This property is a summary property of data from sightings and other data that may or may not be available in STIX.
    /// If new sightings are received that are later than the last seen timestamp, the object may be updated to account for the new data.
    ///
    /// This MUST be greater than or equal to the timestamp in the first_seen property.
    rel .'last_seen'?: common.timestamp

    /// The high-level goals of this Intrusion Set, namely, what are they trying to do.
    /// For example, they may be motivated by personal gain, but their goal is to steal credit card numbers.
    /// To do this, they may execute specific Campaigns that have detailed objectives like compromising point of sale systems at a large retailer.
    ///
    /// Another example: to gain information about latest merger and IPO information from ACME Bank.
    rel .'goals'?: {common.string}

    /// This defines the organizational level at which this Intrusion Set typically works, which in turn determines the resources available to this Intrusion Set for use in an attack.
    /// This is an open vocabulary and values SHOULD come from the `attack-resource-level-ov` vocabulary.
    rel .'resource_level': ov.attack-resource-level-ov

    /// The primary reason, motivation, or purpose behind this Intrusion Set.
    /// The motivation is why the Intrusion Set wishes to achieve the goal (what they are trying to achieve).
    ///
    /// For example, an Intrusion Set with a goal to disrupt the finance sector in a country might be motivated by ideological hatred of capitalism.
    ///
    /// This is an open vocabulary and values SHOULD come from the `attack-motivation-ov` vocabulary.
    rel .'primary_motivation'?: ov.attack-motivation-ov

    /// The secondary reasons, motivations, or purposes behind this Intrusion Set.
    /// These motivations can exist as an equal or near-equal cause to the primary motivation.
    /// However, it does not replace or necessarily magnify the primary motivation, but it might indicate additional context.
    /// The position in the list has no significance.
    ///
    /// This is an open vocabulary and values SHOULD come from the attack-motivation-ov vocabulary.
    rel .'secondary_motivations'?: {ov.attack-motivation-ov}
)

/// A Location represents a geographic location. The location may be described as any, some or all of the following: region (e.g., North America), civic address (e.g. New York, US), latitude and longitude.
/// 
/// Locations are primarily used to give context to other SDOs.
/// For example, a Location could be used in a relationship to describe that the Bourgeois Swallow intrusion set originates from Eastern Europe.
/// 
/// The Location SDO can be related to an Identity or Intrusion Set to indicate that the identity or intrusion set is located in that location.
/// It can also be related from a malware or attack pattern to indicate that they target victims in that location.
/// The Location object describes geographic areas, not governments, even in cases where that area might have a government.
/// For example, a Location representing the United States describes the United States as a geographic area, not the federal government of the United States.
/// 
/// At least one of the following properties/sets of properties MUST be provided:
/// * region
/// * country
/// * latitude and longitude
/// 
/// When a combination of properties is provided (e.g. a region and a latitude and longitude) the more precise properties are what the location describes.
/// In other words, if a location contains both a region of northern-america and a country of us, then the location describes the United States, not all of North America.
/// In cases where a latitude and longitude are specified without a precision, the location describes the most precise other value.
/// 
/// If precision is specified, then the datum for latitude and longitude MUST be WGS 84 [WGS84].
/// Organizations specifying a designated location using latitude and longitude SHOULD specify the precision which is appropriate for the scope of the location being identified.
/// The scope is defined by the boundary as outlined by the precision around the coordinates.
def location (
    rel .is: stix_domain_object
    rel .'type': 'location'
    rel .'id'(rel .gen: auto)|id: location-id

    /// A name used to identify the Location.
    rel .'name'?: common.string

    /// A textual description of the Location.
    rel .'description'?: common.string

    /// The latitude of the Location in decimal degrees. Positive numbers describe latitudes north of the equator, and negative numbers describe latitudes south of the equator. The value of this property MUST be between -90.0 and 90.0, inclusive.
    /// If the longitude property is present, this property MUST be present.
    rel .'latitude'?: f64

    /// The longitude of the Location in decimal degrees. Positive numbers describe longitudes east of the prime meridian and negative numbers describe longitudes west of the prime meridian. The value of this property MUST be between -180.0 and 180.0, inclusive.
    /// If the latitude property is present, this property MUST be present.
    rel .'longitude'?: f64

    /// Defines the precision of the coordinates specified by the latitude and longitude properties.
    /// This is measured in meters.
    /// The actual Location may be anywhere up to precision meters from the defined point.
    ///
    /// If this property is not present, then the precision is unspecified.
    ///
    /// If this property is present, the latitude and longitude properties MUST be present. 
    rel .'precision'?: (
        rel .is: f64
        rel .is: SI.meter
    )

    /// The region that this Location describes.
    /// This property SHOULD contain a value from `region-ov`.
    rel .'region'?: ov.region-ov

    /// The country that this Location describes.
    /// This property SHOULD contain a valid ISO 3166-1 ALPHA-2 Code [ISO3166-1].
    rel .'country'?: common.string

    /// The state, province, or other sub-national administrative area that this Location describes.
    rel .'administrative_area'?: common.string

    /// The city that this Location describes.
    rel .'city'?: common.string

    /// The street address that this Location describes.
    /// This property includes all aspects or parts of the street address.
    /// For example, some addresses may have multiple lines including a mailstop or apartment number.
    rel .'street_address'?: common.string

    /// The postal code for this Location.
    rel .'postal_code'?: common.string
)

/// Malware is a type of TTP that represents malicious code. It generally refers to a program that is inserted into a system, usually covertly.
/// The intent is to compromise the confidentiality, integrity, or availability of the victim's data, applications, or operating system (OS) or otherwise annoy or disrupt the victim.
///
/// The Malware SDO characterizes, identifies, and categorizes malware instances and families from data that may be derived from analysis.
/// This SDO captures detailed information about how the malware works and what it does.
/// This SDO captures contextual data relevant to sharing Malware data without requiring the full analysis provided by the Malware Analysis SDO.
///
/// The Indicator SDO provides intelligence producers with the ability to define, using the STIX Pattern Grammar in a standard way to identify and detect behaviors associated with malicious activities.
/// Although the Malware SDO provides vital intelligence on a specific instance or malware family, it does not provide a standard grammar that the Indicator SDO provides to identify those properties in security detection systems designed to process the STIX Pattern grammar.
/// We strongly encourage the use of STIX Indicators for the detection of actual malware, due to its use of the STIX Patterning language and the clear semantics that it provides.
///
/// To minimize the risk of a consumer compromising their system in parsing malware samples, producers SHOULD consider sharing defanged content (archive and password-protected samples) instead of raw, base64-encoded malware samples.
def malware (
    rel .is: stix_domain_object
    rel .'type': 'malware'
    rel .'id'(rel .gen: auto)|id: malware-id

    /// A name used to identify the malware instance or family, as specified by the producer of the SDO.
    /// For a malware family the name MUST be defined. If a name for a malware instance is not available, the SHA-256 hash value or sample’s filename MAY be used instead.
    rel .'name'?: common.string

    /// A description that provides more details and context about the malware instance or family, potentially including its purpose and its key characteristics.
    rel .'description'?: common.string

    /// This property is an open vocabulary that specifies a set of categorizations for the malware being described.
    ///
    /// This is an open vocabulary and values SHOULD come from the `malware-type-ov` vocabulary.
    rel .'malware_types': {ov.malware-type-ov}

    /// Whether the object represents a malware family (if `true`) or a malware instance (if `false`).
    rel .'is_family': boolean

    /// Alternative names used to identify this malware or malware family.
    rel .'aliases'?: {common.string}

    /// The list of Kill Chain Phases for which this malware can be used.
    rel .'kill_chain_phases'?: {common.kill-chain-phase}

    /// The time that the malware instance or family was first seen.
    ///
    /// This property is a summary property of data from sightings and other data that may or may not be available in STIX.
    /// If new sightings are received that are earlier than the first seen timestamp, the object may be updated to account for the new data.
    rel .'first_seen'?: common.timestamp

    /// The time that the malware family or malware instance was last seen.
    ///
    /// This property is a summary property of data from sightings and other data that may or may not be available in STIX.
    /// If new sightings are received that are later than the last_seen timestamp, the object may be updated to account for the new data.
    ///
    /// This MUST be greater than or equal to the timestamp in the `first_seen` property.
    rel .'last_seen'?: common.timestamp

    /// The operating systems that the malware family or malware instance is executable on.
    ///
    /// Each string value for this property SHOULD be a CPE v2.3 entry from the official NVD CPE Dictionary [NVD].
    /// This property MAY include custom values including values taken from other standards such as SWID [SWID].
    rel .'os_execution_envs'?: {common.string}

    /// The processor architectures (e.g., x86, ARM, etc.) that the malware instance or family is executable on.
    ///
    /// This is an open vocabulary and values SHOULD come from the `processor-architecture-ov` vocabulary.
    rel .'architecture_execution_envs'?: {ov.processor-architecture-ov}

    /// The programming language(s) used to implement the malware instance or family.
    ///
    /// This is an open vocabulary and values SHOULD come from the `implementation-language-ov` vocabulary.
    rel .'implementation_languages'?: {ov.implementation-language-ov}

    /// Specifies any capabilities identified for the malware instance or family.
    /// 
    /// This is an open vocabulary and values SHOULD come from the `malware-capabilities-ov` vocabulary.
    rel .'capabilities'?: {ov.malware-capabilities-ov}

    /// The sample_refs property specifies a list of identifiers of the SCO file or artifact objects associated with this malware instance(s) or family.
    ///
    /// If is_family is false, then all samples listed in sample_refs MUST refer to the same binary data.
    rel .'sample_refs'?: {sdo_identifier}
)

/// Malware Analysis captures the metadata and results of a particular static or dynamic analysis performed on a malware instance or family.
/// One of av_result or analysis_sco_refs MUST be provided.
def malware-analysis (
    rel .is: stix_domain_object
    rel .'type': 'malware-analysis'
    rel .'id'(rel .gen: auto)|id: malware-analysis-id

    /// The name of the analysis engine or product that was used.
    /// Product names SHOULD be all lowercase with words separated by a dash `"-"`.
    /// 
    /// For cases where the name of a product cannot be specified, a value of `"anonymized"` MUST be used.
    rel .'product': common.string

    /// The version of the analysis product that was used to perform the analysis. 
    rel .'version'?: common.string

    rel .'host_vm_ref'?: software-id
)

/// A Note is intended to convey informative text to provide further context and/or to provide additional analysis not contained in the STIX Objects, Marking Definition objects, or Language Content objects which the Note relates to.
/// Notes can be created by anyone (not just the original object creator).
///
/// For example, an analyst may add a Note to a Campaign object created by another organization indicating that they've seen posts related to that Campaign on a hacker forum.
///
/// Because Notes are typically (though not always) created by human analysts and are comprised of human-oriented text, they contain an additional property to capture the analyst(s) that created the Note.
/// This is distinct from the created_by_ref property, which is meant to capture the organization that created the object.
def note (
    rel .is: stix_domain_object
    rel .'type': 'note'
    rel .'id'(rel .gen: auto)|id: note-id

    /// A brief summary of the note content.
    rel .'abstract'?: common.string

    /// The content of the note.
    rel .'content': common.string

    /// The name of the author(s) of this note (e.g., the analyst(s) that created it).
    rel .'authors'?: {common.string}

    /// The STIX Objects that the note is being applied to.
    rel .'object_refs': {sdo_identifier}
)

/// Observed Data conveys information about cyber security related entities such as files, systems, and networks using the STIX Cyber-observable Objects (SCOs).
/// For example, Observed Data can capture information about an IP address, a network connection, a file, or a registry key.
/// Observed Data is not an intelligence assertion, it is simply the raw information without any context for what it means.
/// 
/// Observed Data can capture that a piece of information was seen one or more times.
/// Meaning, it can capture both a single observation of a single entity (file, network connection) as well as the aggregation of multiple observations of an entity.
/// When the number_observed property is 1 the Observed Data represents a single entity. When the number_observed property is greater than 1, the Observed Data represents several instances of an entity potentially collected over a period of time.
/// If a time window is known, that can be captured using the first_observed and last_observed properties.
/// When used to collect aggregate data, it is likely that some properties in the SCO (e.g., timestamp properties) will be omitted because they would differ for each of the individual observations.
/// 
/// Observed Data may be used by itself (without relationships) to convey raw data collected from any source including analyst reports, sandboxes, and network and host-based detection tools.
/// An intelligence producer conveying Observed Data SHOULD include as much context (e.g. SCOs) as possible that supports the use of the observed data set in systems expecting to utilize the Observed Data for improved security.
/// This includes all SCOs that matched on an Indicator pattern and are represented in the collected observed event (or events) being conveyed in the Observed Data object.
/// For example, a firewall could emit a single Observed Data instance containing a single Network Traffic object for each connection it sees.
/// The firewall could also aggregate data and instead send out an Observed Data instance every ten minutes with an IP address and an appropriate number_observed value to indicate the number of times that IP address was observed in that window.
/// A sandbox could emit an Observed Data instance containing a file hash that it discovered.
/// 
/// Observed Data may also be related to other SDOs to represent raw data that is relevant to those objects.
/// For example, the Sighting Relationship object, can relate an Indicator, Malware, or other SDO to a specific Observed Data to represent the raw information that led to the creation of the Sighting (e.g., what was actually seen that suggested that a particular instance of malware was active).
/// 
/// To support backwards compatibility, related SCOs can still be specified using the objects properties, Either the objects property or the object_refs property MUST be provided, but both MUST NOT be present at the same time.
def observed-data (
    rel .is: stix_domain_object
    rel .'type': 'observed-data'
    rel .'id'(rel .gen: auto)|id: observed-data-id

    /// The beginning of the time window during which the data was seen.
    rel .'first_observed': common.timestamp

    /// The end of the time window during which the data was seen.
    ///
    /// This MUST be greater than or equal to the timestamp in the first_observed property.
    rel .'last_observed': common.timestamp

    /// The number of times that each Cyber-observable object represented in the objects or object_ref property was seen. If present, this MUST be an integer between 1 and 999,999,999 inclusive.
    /// If the number_observed property is greater than 1, the data contained in the objects or object_refs property was seen multiple times. In these cases, object creators MAY omit properties of the SCO (such as timestamps) that are specific to a single instance of that observed data.|
    rel .'number_observed': common.integer

    // FIXME: There is a deprecated field here, `objects`.
    /// rel .'objects'?: observable-container

    /// A list of SCOs and SROs representing the observation. The object_refs MUST contain at least one SCO reference if defined.
    ///
    /// The object_refs MAY include multiple SCOs and their corresponding SROs, if those SCOs are related as part of a single observation.
    ///
    /// For example, a Network Traffic object and two IPv4 Address objects related via the src_ref and dst_ref properties can be contained in the same Observed Data because they are all related and used to characterize that single entity.
    ///
    /// This property MUST NOT be present if objects is provided.
    rel .'object_refs'?: {sdo_identifier}
)

/// An Opinion is an assessment of the correctness of the information in a STIX Object produced by a different entity.
/// The primary property is the opinion property, which captures the level of agreement or disagreement using a fixed scale.
/// That fixed scale also supports a numeric mapping to allow for consistent statistical operations across opinions.
///
/// For example, an analyst from a consuming organization might say that they "strongly disagree" with a Campaign object and provide an explanation about why.
/// In a more automated workflow, a SOC operator might give an Indicator "one star" in their TIP (expressing "strongly disagree") because it is considered to be a false positive within their environment.
/// Opinions are subjective, and the specification does not address how best to interpret them. Sharing communities are encouraged to provide clear guidelines to their constituents regarding best practice for the use of Opinion objects within the community.
///
/// Because Opinions are typically (though not always) created by human analysts and are comprised of human-oriented text, they contain an additional property to capture the analyst(s) that created the Opinion.
/// This is distinct from the created_by_ref property, which is meant to capture the organization that created the object.
def opinion (
    rel .is: stix_domain_object
    rel .'type': 'opinion'
    rel .'id'(rel .gen: auto)|id: opinion-id

    /// An explanation of why the producer has this Opinion.
    /// For example, if an Opinion of strongly-disagree is given, the explanation can contain an explanation of why the Opinion producer disagrees and what evidence they have for their disagreement.
    rel .'explanation'?: common.string

    /// The name of the author(s) of this Opinion (e.g., the analyst(s) that created it).
    rel .'authors'?: {common.string}

    /// The opinion that the producer has about all of the STIX Object(s) listed in the `object_refs` property.
    ///
    /// The values of this property MUST come from the `opinion-enum` enumeration.
    rel .'opinion': ov.opinion-enum

    /// The STIX Objects that the Opinion is being applied to.
    rel .'object_refs': {sdo_identifier}
)

/// Reports are collections of threat intelligence focused on one or more topics, such as a description of a threat actor, malware, or attack technique, including context and related details.
/// They are used to group related threat intelligence together so that it can be published as a comprehensive cyber threat story.
///
/// The Report SDO contains a list of references to STIX Objects (the CTI objects included in the report) along with a textual description and the name of the report.
///
/// For example, a threat report produced by ACME Defense Corp. discussing the Glass Gazelle campaign should be represented using Report.
/// The Report itself would contain the narrative of the report while the Campaign SDO and any related SDOs (e.g., Indicators for the Campaign, Malware it uses, and the associated Relationships) would be referenced in the report contents.
def report (
    rel .is: stix_domain_object
    rel .'type': 'report'
    rel .'id'(rel .gen: auto)|id: report-id

    /// A name used to identify the Report.
    rel .'name': common.string

    /// A description that provides more details and context about the Report, potentially including its purpose and its key characteristics.
    rel .'description'?: common.string

    /// This property is an open vocabulary that specifies the primary subject(s) of this report.
    ///
    /// This is an open vocabulary and values SHOULD come from the `report-type-ov` vocabulary.
    rel .'report_types': {ov.report-type-ov}

    /// The date that this Report object was officially published by the creator of this report.
    ///
    /// The publication date (public release, legal release, etc.) may be different than the date the report was created or shared internally (the date in the created property).
    rel .'published': common.timestamp

    /// Specifies the STIX Objects that are referred to by this Report.
    rel .'object_refs': {sdo_identifier}
)

/// Threat Actors are actual individuals, groups, or organizations believed to be operating with malicious intent.
/// A Threat Actor is not an Intrusion Set but may support or be affiliated with various Intrusion Sets, groups, or organizations over time.
///
/// Threat Actors leverage their resources, and possibly the resources of an Intrusion Set, to conduct attacks and run Campaigns against targets.
///
/// Threat Actors can be characterized by their motives, capabilities, goals, sophistication level, past activities, resources they have access to, and their role in the organization.
def threat-actor (
    rel .is: stix_domain_object
    rel .'type': 'threat-actor'
    rel .'id'(rel .gen: auto)|id: threat-actor-id

    /// A name used to identify this Threat Actor or Threat Actor group.
    rel .'name': common.string

    /// A description that provides more details and context about the Threat Actor, potentially including its purpose and its key characteristics.
    rel .'description'?: common.string

    /// This property specifies the type(s) of this threat actor.
    ///
    /// This is an open vocabulary and values SHOULD come from the `threat-actor-type-ov` vocabulary.
    rel .'threat_actor_types': {ov.threat-actor-type-ov}

    /// A list of other names that this Threat Actor is believed to use.
    rel .'aliases'?: {common.string}

    /// The time that this Threat Actor was first seen.
    ///
    /// This property is a summary property of data from sightings and other data that may or may not be available in STIX.
    /// If new sightings are received that are earlier than the first seen timestamp, the object may be updated to account for the new data.
    rel .'first_seen'?: common.timestamp

    /// The time that this Threat Actor was last seen.
    ///
    /// This property is a summary property of data from sightings and other data that may or may not be available in STIX.
    /// If new sightings are received that are later than the last seen timestamp, the object may be updated to account for the new data.
    ///
    /// This MUST be greater than or equal to the timestamp in the `first_seen` property.
    rel .'last_seen'?: common.timestamp

    /// A list of roles the Threat Actor plays.
    ///
    /// This is an open vocabulary and the values SHOULD come from the `threat-actor-role-ov` vocabulary.
    rel .'roles'?: {ov.threat-actor-role-ov}

    /// The high-level goals of this Threat Actor, namely, what are they trying to do.
    /// For example, they may be motivated by personal gain, but their goal is to steal credit card numbers.
    /// To do this, they may execute specific Campaigns that have detailed objectives like compromising point of sale systems at a large retailer. 
    rel .'goals'?: {common.string}

    /// The skill, specific knowledge, special training, or expertise a Threat Actor must have to perform the attack.
    /// This is an open vocabulary and values SHOULD come from the `threat-actor-sophistication-ov` vocabulary.
    rel .'sophistication'?: ov.threat-actor-sophistication-ov

    /// This defines the organizational level at which this Threat Actor typically works, which in turn determines the resources available to this Threat Actor for use in an attack.
    /// This attribute is linked to the sophistication property — a specific resource level implies that the Threat Actor has access to at least a specific sophistication level.
    ///
    /// This is an open vocabulary and values SHOULD come from the `attack-resource-level-ov` vocabulary.
    rel .'resource_level'?: ov.attack-resource-level-ov

    /// The primary reason, motivation, or purpose behind this Threat Actor. The motivation is why the Threat Actor wishes to achieve the goal (what they are trying to achieve).
    ///
    /// For example, a Threat Actor with a goal to disrupt the finance sector in a country might be motivated by ideological hatred of capitalism.
    ///
    /// This is an open vocabulary and values SHOULD come from the `attack-motivation-ov` vocabulary.
    rel .'primary_motivation'?: ov.attack-motivation-ov

    /// The secondary reasons, motivations, or purposes behind this Threat Actor.
    ///
    /// These motivations can exist as an equal or near-equal cause to the primary motivation.
    /// However, it does not replace or necessarily magnify the primary motivation, but it might indicate additional context.
    /// The position in the list has no significance.
    /// This is an open vocabulary and values SHOULD come from the `attack-motivation-ov` vocabulary.
    rel .'secondary_motivations'?: {ov.attack-motivation-ov}

    /// The personal reasons, motivations, or purposes of the Threat Actor regardless of organizational goals.
    /// 
    /// Personal motivation, which is independent of the organization’s goals, describes what impels an individual to carry out an attack.
    /// Personal motivation may align with the organization’s motivation—as is common with activists—but more often it supports personal goals.
    /// For example, an individual analyst may join a Data Miner corporation because his or her skills may align with the corporation’s objectives.
    /// But the analyst most likely performs his or her daily work toward those objectives for personal reward in the form of a paycheck.
    /// The motivation of personal reward may be even stronger for Threat Actors who commit illegal acts, as it is more difficult for someone to cross that line purely for altruistic reasons.
    /// The position in the list has no significance.
    /// 
    /// This is an open vocabulary and values SHOULD come from the `attack-motivation-ov` vocabulary.
    rel .'personal_motivations'?: {ov.attack-motivation-ov}
)

/// Tools are legitimate software that can be used by threat actors to perform attacks.
/// Knowing how and when threat actors use such tools can be important for understanding how campaigns are executed.
/// Unlike malware, these tools or software packages are often found on a system and have legitimate purposes for power users, system administrators, network administrators, or even normal users.
/// Remote access tools (e.g., RDP) and network scanning tools (e.g., Nmap) are examples of Tools that may be used by a Threat Actor during an attack.
///
/// The Tool SDO characterizes the properties of these software tools and can be used as a basis for making an assertion about how a Threat Actor uses them during an attack.
/// It contains properties to name and describe the tool, a list of Kill Chain Phases the tool can be used to carry out, and the version of the tool.
///
/// This SDO MUST NOT be used to characterize malware.
/// Further, Tool MUST NOT be used to characterise tools used as part of a course of action in response to an attack.
def tool (
    rel .is: stix_domain_object
    rel .'type': 'tool'
    rel .'id'(rel .gen: auto)|id: tool-id

    /// The name used to identify the Tool.
    rel .'name': common.string

    /// A description that provides more details and context about the Tool, potentially including its purpose and its key characteristics.
    rel .'description'?: common.string

    /// The kind(s) of tool(s) being described.
    ///
    /// This is an open vocabulary and values SHOULD come from the `tool-type-ov` vocabulary.
    rel .'tool_types'?: {ov.tool-type-ov}

    /// Alternative names used to identify this Tool.
    rel .'aliases'?: {common.string}

    /// The list of kill chain phases for which this Tool can be used. 
    rel .'kill_chain_phases'?: {common.kill-chain-phase}

    /// The version identifier associated with the Tool.
    rel .'tool_version'?: common.string
)

/// A Vulnerability is "a mistake in software that can be directly used by a hacker to gain access to a system or network".
/// For example, if a piece of malware exploits CVE-2015-12345, a Malware object could be linked to a Vulnerability object that references CVE-2015-12345.
/// CVE is a list of information security vulnerabilities and exposures that provides common names for publicly known problems [CVE].
///
/// The Vulnerability SDO is primarily used to link to external definitions of vulnerabilities or to describe 0-day vulnerabilities that do not yet have an external definition.
/// Typically, other SDOs assert relationships to Vulnerability objects when a specific vulnerability is targeted and exploited as part of malicious cyber activity.
/// As such, Vulnerability objects can be used as a linkage to the asset management and compliance process.
def vulnerability (
    rel .is: stix_domain_object
    rel .'type': 'vulnerability'
    rel .'id'(rel .gen: auto)|id: vulnerability-id

    /// A list of external references which refer to non-STIX information.
    /// This property MAY be used to provide one or more Vulnerability identifiers, such as a CVE ID [CVE].
    /// When specifying a CVE ID, the source_name property of the external reference MUST be set to cve and the external_id property MUST be the exact CVE identifier.
    rel .'external_references'?: {common.external-reference}

    /// A name used to identify the Vulnerability.
    rel .'name': common.string

    /// A description that provides more details and context about the Vulnerability, potentially including its purpose and its key characteristics.
    rel .'description'?: common.string
)

/// The Artifact object permits capturing an array of bytes (8-bits), as a base64-encoded string, or linking to a file-like payload.
///
/// One of `payload_bin` or `url` MUST be provided. It is incumbent on object creators to ensure that the URL is accessible for downstream consumers.
def artifact (
    rel .is: stix_cyber_observable_object
    rel .'type': 'artifact'
    rel .'id'(rel .gen: auto)|id: artifact-id

    /// Whenever feasible, this value SHOULD be one of the values defined in the Template column in the IANA media type registry [Media Types].
    /// Maintaining a comprehensive universal catalog of all extant file types is obviously not possible. When specifying a MIME Type not included in the IANA registry, implementers should use their best judgement so as to facilitate interoperability.
    rel .'mime_type'?: common.string

    /// Specifies the binary data contained in the artifact as a base64-encoded string.
    /// This property MUST NOT be present if url is provided.
    rel .'payload_bin'?: common.binary

    /// The value of this property MUST be a valid URL that resolves to the unencoded content.
    /// This property MUST NOT be present if payload_bin is provided.
    rel .'url'?: common.url

    /// Specifies a dictionary of hashes for the contents of the url or the payload_bin.
    /// This property MUST be present when the url property is present.
    /// Dictionary keys MUST come from the hash-algorithm-ov.
    rel .'hashes'?: common.hashes

    /// If the artifact is encrypted, specifies the type of encryption algorithm the binary data  (either via payload_bin or url) is encoded in.
    ///
    /// The value of this property MUST come from the encryption-algorithm-enum enumeration.
    ///
    /// If both mime_type and encryption_algorithm are included, this signifies that the artifact represents an encrypted archive.
    rel .'encryption_algorithm'?: ov.encryption-algorithm-enum

    /// Specifies the decryption key for the encrypted binary data (either via payload_bin or url).
    /// For example, this may be useful in cases of sharing malware samples, which are often encoded in an encrypted archive.
    ///
    /// This property MUST NOT be present when the encryption_algorithm property is absent.
    rel .'decryption-key'?: common.string
)

/// The AS object represents the properties of an Autonomous System (AS).
def autonomous-system (
    rel .is: stix_cyber_observable_object
    rel .'type': 'autonomous-system'
    rel .'id'(rel .gen: auto)|id: autonomous-system-id

    /// Specifies the number assigned to the AS. Such assignments are typically performed by a Regional Internet Registry (RIR).
    rel .'number': common.integer

    /// Specifies the name of the AS.
    rel .'name'?: common.string

    /// Specifies the name of the Regional Internet Registry (RIR) that assigned the number to the AS.
    rel .'rir'?: common.string
)

/// The Directory object represents the properties common to a file system directory. 
def directory (
    rel .is: stix_cyber_observable_object
    rel .'type': 'directory'
    rel .'id'(rel .gen: auto)|id: directory-id

    /// Specifies the path, as originally observed, to the directory on the file system.
    rel .'path': common.string

    /// Specifies the observed encoding for the path.
    /// The value MUST be specified if the path is stored in a non-Unicode encoding.
    /// This value MUST be specified using the corresponding name from the 2013-12-20 revision of the IANA character set registry [Character Sets].
    /// If the preferred MIME name for a character set is defined, this value MUST be used; if it is not defined, then the Name value from the registry MUST be used instead.
    rel .'path_enc'?: common.string

    /// Specifies the date/time the directory was created.
    rel .'ctime'?: common.timestamp

    /// Specifies the date/time the directory was last written to/modified.
    rel .'mtime'?: common.timestamp

    /// Specifies the date/time the directory was last accessed.
    rel .'atime'?: common.timestamp

    /// Specifies a list of references to other File and/or Directory objects contained within the directory.
    ///
    /// The objects referenced in this list MUST be of type `file` or `directory`.
    rel .'contains_refs'?: {(
        rel .is?: file-id
        rel .is?: directory-id
    )}
)

/// The Domain Name object represents the properties of a network domain name.
def domain-name (
    rel .is: stix_cyber_observable_object
    rel .'type': 'domain-name'
    rel .'id'(rel .gen: auto)|id: domain-name-id

    /// Specifies the value of the domain name.
    /// The value of this property MUST conform to [RFC1034], and each domain and sub-domain contained within the domain name MUST conform to [RFC5890].
    rel .'value': common.string

    // Note: Deprecated
    // rel .'resolves_to_refs'?: {sdo_identifier}
)

/// The Email Address object represents a single email address.
def email-addr (
    rel .is: stix_cyber_observable_object
    rel .'type': 'email-addr'
    rel .'id'(rel .gen: auto)|id: email-addr-id

    /// Specifies the value of the email address. This MUST NOT include the display name.
    ///
    /// This property corresponds to the addr-spec construction in section 3.4 of [RFC5322], for example, `jane.smith@example.com`.
    rel .'value': common.string

    /// Specifies a single email display name, i.e., the name that is displayed to the human user of a mail application.
    ///
    /// This property corresponds to the display-name construction in section 3.4 of [RFC5322], for example, Jane Smith.
    rel .'display_name'?: common.string

    /// Specifies the user account that the email address belongs to, as a reference to a User Account object.
    ///
    /// The object referenced in this property MUST be of type user-account.
    rel .'belongs_to_ref'?: user-account-id
)


// FIXME: This seems a little out of place, but must currently be in this domain because it references id types,
// and ID types and their entities must be in the same domain.
// This type should maybe live in a separate domain but still be able to use IDs.

/// Specifies one component of a multi-part email body.
///
/// There is no property to capture the value of the “Content-Transfer-Encoding” header field, since the body MUST be decoded before being represented in the body property.
///
/// One of body OR body_raw_ref MUST be included.
def mime-part-type (
    /// Specifies the contents of the MIME part if the content_type is not provided or starts with text/ (e.g., in the case of plain text or HTML email).
    ///
    /// For inclusion in this property, the contents MUST be decoded to Unicode. Note that the charset provided in content_type is for informational usage and not for decoding of this property. 
    rel .'body'?: common.string

    /// Specifies the contents of non-textual MIME parts, that is those whose content_type does not start with text/, as a reference to an Artifact object or File object.
    ///
    /// The object referenced in this property MUST be of type artifact or file.
    /// For use cases where conveying the actual data contained in the MIME part is of primary importance, artifact SHOULD be used.
    /// Otherwise, for use cases where conveying metadata about the file-like properties of the MIME part is of primary importance, file SHOULD be used.
    rel .'body_raw_ref'?: (
        rel .is?: file-id
        rel .is?: artifact-id
    )

    /// Specifies the value of the “Content-Type” header field of the MIME part.
    ///
    /// Any additional “Content-Type” header field parameters such as charset SHOULD be included in this property.
    ///
    /// Example:
    /// `text/html; charset=UTF-8`
    rel .'content_type'?: common.string

    /// Specifies the value of the “Content-Disposition” header field of the MIME part.
    rel .'content_disposition'?: common.string
)

/// The Email Message object represents an instance of an email message, corresponding to the internet message format described in [RFC5322] and related RFCs.
///
/// Header field values that have been encoded as described in section 2 of [RFC2047] MUST be decoded before inclusion in Email Message object properties.
/// For example, this is some text MUST be used instead of `=?iso-8859-1?q?this=20is=20some=20text?=`.
/// Any characters in the encoded value which cannot be decoded into Unicode SHOULD be replaced with the 'REPLACEMENT CHARACTER' (U+FFFD).
/// If it is necessary to capture the header value as observed, this can be achieved by referencing an Artifact object through the raw_email_ref property.
def email-message (
    rel .is: stix_cyber_observable_object
    rel .'type': 'email-message'
    rel .'id'(rel .gen: auto)|id: email-message-id

    /// Indicates whether the email body contains multiple MIME parts.
    rel .'is_multipart': boolean

    /// Specifies the date/time that the email message was sent.
    rel .'date'?: common.timestamp

    /// Specifies the value of the “Content-Type” header of the email message.
    rel .'content_type'?: common.string

    /// Specifies the value of the “From:” header of the email message.
    /// The "From:" field specifies the author of the message, that is, the mailbox(es) of the person or system responsible for the writing of the message.
    ///
    /// The object referenced in this property MUST be of type email-address.
    rel .'from_ref'?: email-addr-id

    /// Specifies the value of the “Sender” field of the email message.
    /// The "Sender:" field specifies the mailbox of the agent responsible for the actual transmission of the message.
    ///
    /// The object referenced in this property MUST be of type email-address.
    rel .'sender_ref'?: email-addr-id

    /// Specifies the mailboxes that are “To:” recipients of the email message.
    ///
    /// The objects referenced in this list MUST be of type email-address.
    rel .'to_refs'?: {email-addr-id}

    /// Specifies the mailboxes that are “CC:” recipients of the email message.
    ///
    /// The objects referenced in this list MUST be of type email-address.
    rel .'cc_refs'?: {email-addr-id}

    /// Specifies the mailboxes that are “BCC:” recipients of the email message.
    ///
    /// As per [RFC5322], the absence of this property should not be interpreted as semantically equivalent to an absent BCC header on the message being characterized.
    ///
    /// The objects referenced in this list MUST be of type email-address.
    rel .'bcc_refs'?: {email-addr-id}

    /// Specifies the Message-ID field of the email message.
    rel .'message_id'?: common.string

    /// Specifies the subject of the email message.
    rel .'subject'?: common.string

    /// Specifies one or more "Received" header fields that may be included in the email headers.
    ///
    /// List values MUST appear in the same order as present in the email message.
    rel .'received_lines'?: {common.string}

    /// Specifies any other header fields (except for `date`, `received_lines`, `content_type`, `from_ref`, `sender_ref`, `to_refs`, `cc_refs`, `bcc_refs`, and `subject`) found in the email message, as a dictionary.
    ///
    /// Each key/value pair in the dictionary represents the name/value of a single header field or names/values of a header field that occurs more than once.
    /// Each dictionary key SHOULD be a case-preserved version of the header field name.
    /// The corresponding value for each dictionary key MUST always be a list of type string to support when a header field is repeated.
    rel .'additional_header_fields'?: common.dictionary

    /// Specifies a string containing the email body. This property MUST NOT be used if is_multipart is true.
    rel .'body'?: common.string

    /// Specifies a list of the MIME parts that make up the email body. This property MUST NOT be used if is_multipart is false.
    rel .'body_multipart'?: {mime-part-type}

    /// Specifies the raw binary contents of the email message, including both the headers and body, as a reference to an Artifact object.
    ///
    /// The object referenced in this property MUST be of type `artifact`.
    rel .'raw_email_ref'?: artifact-id
)

/// The File object represents the properties of a file.
/// A File object MUST contain at least one of hashes or name.
def file (
    rel .is: stix_cyber_observable_object
    rel .'type': 'file'
    rel .'id'(rel .gen: auto)|id: file-id

    /// The File object defines the following extensions. In addition to these, producers MAY create their own.
    ///
    /// `ntfs-ext`, `raster-image-ext`, `pdf-ext`, `archive-ext`, `windows-pebinary-ext`
    ///
    /// Dictionary keys MUST identify the extension type by name.
    ///
    /// The corresponding dictionary values MUST contain the contents of the extension instance.
    // FIXME: Model extensions!
    rel .'extensions'?: common.dictionary

    /// Specifies a dictionary of hashes for the file.
    ///
    /// (When used with the Archive File Extension, this refers to the hash of the entire archive file, not its contents.)
    ///
    /// Dictionary keys MUST come from the hash-algorithm-ov.
    // FIXME: dictionary over an enum?
    rel .'hashes'?: common.hashes

    /// Specifies the size of the file, in bytes. The value of this property MUST NOT be negative.
    rel .'size'?: common.integer

    /// Specifies the name of the file.
    rel .'name'?: common.string

    /// Specifies the observed encoding for the name of the file.
    /// This value MUST be specified using the corresponding name from the 2013-12-20 revision of the IANA character set registry [Character Sets].
    /// If the value from the Preferred MIME Name column for a character set is defined, this value MUST be used; if it is not defined, then the value from the Name column in the registry MUST be used instead.
    /// 
    /// This property allows for the capture of the original text encoding for the file name, which may be forensically relevant; for example, a file on an NTFS volume whose name was created using the windows-1251 encoding, commonly used for languages based on Cyrillic script.
    rel .'name_enc'?: common.string

    /// Specifies the hexadecimal constant (“magic number”) associated with a specific file format that corresponds to the file, if applicable.
    rel .'magic_number_hex'?: common.hex

    /// Specifies the MIME type name specified for the file, e.g., application/msword.
    /// 
    /// Whenever feasible, this value SHOULD be one of the values defined in the Template column in the IANA media type registry [Media Types].
    /// 
    /// Maintaining a comprehensive universal catalog of all extant file types is obviously not possible. When specifying a MIME Type not included in the IANA registry, implementers should use their best judgement so as to facilitate interoperability.
    rel .'mime_type'?: common.string

    /// Specifies the date/time the file was created.
    rel .'ctime'?: common.timestamp

    /// Specifies the date/time the file was last written to/modified.
    rel .'mtime'?: common.timestamp

    /// Specifies the date/time the file was last accessed.
    rel .'atime'?: common.timestamp

    /// Specifies the parent directory of the file, as a reference to a Directory object.
    /// The object referenced in this property MUST be of type directory.
    rel .'parent_directory_ref'?: directory-id

    /// Specifies a list of references to other Cyber-observable Objects contained within the file, such as another file that is appended to the end of the file, or an IP address that is contained somewhere in the file.
    ///
    /// This is intended for use cases other than those targeted by the Archive extension.
    rel .'contains_refs'?: {sdo_identifier}

    /// Specifies the content of the file, represented as an Artifact object.
    ///
    /// The object referenced in this property MUST be of type artifact.
    rel .'content_ref'?: {artifact-id}
)

/// The IPv4 Address object represents one or more IPv4 addresses expressed using CIDR notation.
def ipv4-addr(
    rel .is: stix_cyber_observable_object
    rel .'type': 'ipv4-addr'
    rel .'id'(rel .gen: auto)|id: ipv4-addr-id

    /// Specifies the values of one or more IPv4 addresses expressed using CIDR notation.
    ///
    /// If a given IPv4 Address object represents a single IPv4 address, the CIDR /32 suffix MAY be omitted.
    rel .'value': (
        rel .is: common.string
        rel .example: '10.2.4.5/24'
    )

    // FIXME: Deprecated field `resolves_to_refs` not modelled
    // FIXME: Deprecated field `belongs_to_refs` not modelled
)

/// The IPv6 Address object represents one or more IPv6 addresses expressed using CIDR notation.
def ipv6-addr(
    rel .is: stix_cyber_observable_object
    rel .'type': 'ipv6-addr'
    rel .'id'(rel .gen: auto)|id: ipv6-addr-id

    /// Specifies the values of one or more IPv6 addresses expressed using CIDR notation.
    ///
    /// If a given IPv6 Address object represents a single IPv6 address, the CIDR /128 suffix MAY be omitted.
    rel .'value': common.string

    // FIXME: Deprecated field `resolves_to_refs` not modelled
    // FIXME: Deprecated field `belongs_to_refs` not modelled
)

/// The MAC Address object represents a single Media Access Control (MAC) address.
def mac-addr (
    rel .is: stix_cyber_observable_object
    rel .'type': 'mac-addr'
    rel .'id'(rel .gen: auto)|id: mac-addr-id

    /// Specifies the value of a single MAC address.
    ///
    /// The MAC address value MUST be represented as a single colon-delimited, lowercase MAC-48 address, which MUST include leading zeros for each octet.
    rel .'value': (
        rel .is: common.string
        rel .example: '00:00:ab:cd:ef:01'
    )
)

/// The Mutex object represents the properties of a mutual exclusion (mutex) object.
def mutex (
    rel .is: stix_cyber_observable_object
    rel .'type': 'mutex'
    rel .'id'(rel .gen: auto)|id: mutex-id

    /// Specifies the name of the mutex object.
    rel .'name': common.string
)

/// The Network Traffic object represents arbitrary network traffic that originates from a source and is addressed to a destination.
/// The network traffic MAY or MAY NOT constitute a valid unicast, multicast, or broadcast network connection.
/// This MAY also include traffic that is not established, such as a SYN flood.
/// 
/// To allow for use cases where a source or destination address may be sensitive and not suitable for sharing, such as addresses that are internal to an organization’s network, the source and destination properties (src_ref and dst_ref, respectively) are defined as optional in the properties table below.
/// However, a Network Traffic object MUST contain the protocols property and at least one of the src_ref or dst_ref properties and SHOULD contain the src_port and dst_port properties. 
def network-traffic (
    rel .is: stix_cyber_observable_object
    rel .'type': 'network-traffic'
    rel .'id'(rel .gen: auto)|id: network-traffic-id

    /// The Network Traffic object defines the following extensions. In addition to these, producers MAY create their own.
    ///
    /// `http-request-ext`, `tcp-ext`, `icmp-ext`, `socket-ext`
    ///
    /// Dictionary keys MUST identify the extension type by name.
    ///
    /// The corresponding dictionary values MUST contain the contents of the extension instance.
    // FIXME: Model extensions
    rel .'extensions'?: common.dictionary

    /// Specifies the date/time the network traffic was initiated, if known.
    rel .'start'?: common.timestamp

    /// Specifies the date/time the network traffic ended, if known.
    ///
    /// If the `is_active` property is true, then the end property MUST NOT be included.
    ///
    /// If `start` and `end` are both defined, then end MUST be later than the start value.
    rel .'end'?: common.timestamp

    /// Indicates whether the network traffic is still ongoing.
    ///
    /// If the end property is provided, this property MUST be false.
    rel .'is_active'?: boolean

    /// Specifies the source of the network traffic, as a reference to a Cyber-observable Object.
    ///
    /// The object referenced MUST be of type `ipv4-addr`, `ipv6-addr`, `mac-addr`, or `domain-name` (for cases where the IP address for a domain name is unknown).
    rel .'src_ref'?: (
        rel .is?: ipv4-addr-id
        rel .is?: ipv6-addr-id
        rel .is?: mac-addr-id
        rel .is?: domain-name-id
    )

    /// Specifies the destination of the network traffic, as a reference to a Cyber-observable Object.
    ///
    /// The object referenced MUST be of type `ipv4-addr`, `ipv6-addr`, `mac-addr`, or `domain-name` (for cases where the IP address for a domain name is unknown).
    rel .'dst_ref'?: (
        rel .is?: ipv4-addr-id
        rel .is?: ipv6-addr-id
        rel .is?: mac-addr-id
        rel .is?: domain-name-id
    )

    /// Specifies the source port used in the network traffic, as an integer.
    rel .'src_port'?: (
        rel .is: common.integer
        rel .min: 0
        rel .max: 65535
    )

    /// Specifies the destination port used in the network traffic, as an integer.
    rel .'dst_port'?: (
        rel .is: common.integer
        rel .min: 0
        rel .max: 65535
    )

    /// Specifies the protocols observed in the network traffic, along with their corresponding state.
    ///
    /// Protocols MUST be listed in low to high order, from outer to inner in terms of packet encapsulation.
    /// That is, the protocols in the outer level of the packet, such as IP, MUST be listed first.
    ///
    /// The protocol names SHOULD come from the service names defined in the Service Name column of the IANA Service Name and Port Number Registry [Port Numbers].
    /// In cases where there is variance in the name of a network protocol not included in the IANA Registry, content producers should exercise their best judgement, and it is recommended that lowercase names be used for consistency with the IANA registry.
    rel .'protocols'?: {(
        rel .is: common.string
        rel .example: 'ipv4'
        rel .example: 'tcp'
        rel .example: 'udp'
        rel .example: 'http'
        rel .example: 'https'
        rel .example: 'ssl'
    )}

    /// Specifies the number of bytes, as a positive integer, sent from the source to the destination.
    rel .'src_byte_count'?: (
        rel .is: common.integer
        rel .min: 0
    )

    /// Specifies the number of bytes, as a positive integer, sent from the destination to the source.
    rel .'dst_byte_count'?: (
        rel .is: common.integer
        rel .min: 0
    )

    /// Specifies the number of packets, as a positive integer, sent from the source to the destination.
    rel .'src_packets'?: (
        rel .is: common.integer
        rel .min: 0
    )

    /// Specifies the number of packets, as a positive integer, sent from the destination to the source.
    rel .'dst_packets'?: (
        rel .is: common.integer
        rel .min: 0
    )

    /// Specifies any IP Flow Information Export [IPFIX] data for the traffic, as a dictionary.
    /// Each key/value pair in the dictionary represents the name/value of a single IPFIX element.
    /// Accordingly, each dictionary key SHOULD be a case-preserved version of the IPFIX element name, e.g., octetDeltaCount.
    /// Each dictionary value MUST be either an integer or a string, as well as a valid IPFIX property.
    rel .'ipfix'?: common.dictionary

    /// Specifies the bytes sent from the source to the destination.
    /// The object referenced in this property MUST be of type `artifact`.
    rel .'src_payload_ref'?: artifact-id

    /// Specifies the bytes sent from the destination to the source.
    /// The object referenced in this property MUST be of type `artifact`.
    rel .'dst_payload_ref'?: artifact-id

    /// Links to other network-traffic objects encapsulated by this network-traffic object.
    /// The objects referenced in this property MUST be of type `network-traffic`.
    rel .'encapsulates_refs'?: {network-traffic-id}

    /// Links to another network-traffic object which encapsulates this object.
    /// The object referenced in this property MUST be of type `network-traffic`.
    rel .'encapsulated_by_ref'?: {network-traffic-id}
)

/// The Process object represents common properties of an instance of a computer program as executed on an operating system.
/// A Process object MUST contain at least one property (other than type) from this object (or one of its extensions).
def process (
    rel .is: stix_cyber_observable_object
    rel .'type': 'process'
    rel .'id'(rel .gen: auto)|id: process-id

    /// The Process object defines the following extensions. In addition to these, producers MAY create their own.
    ///
    /// `windows-process-ext`, `windows-service-ext`
    ///
    /// Dictionary keys MUST identify the extension type by name.
    ///
    /// The corresponding dictionary values MUST contain the contents of the extension instance.
    rel .'extensions'?: common.dictionary

    /// Specifies whether the process is hidden.
    rel .'is_hidden'?: boolean

    /// Specifies the Process ID, or PID, of the process.
    rel .'pid'?: common.integer

    /// Specifies the date/time at which the process was created.
    rel .'created_time'?: common.timestamp

    /// Specifies the current working directory of the process.
    rel .'cwd'?: common.string

    /// Specifies the full command line used in executing the process, including the process name (which may be specified individually via the image_ref.name property) and any arguments.
    rel .'command_line'?: common.string

    /// Specifies the list of environment variables associated with the process as a dictionary.
    ///
    /// Each key in the dictionary MUST be a case preserved version of the name of the environment variable, and each corresponding value MUST be the environment variable value as a string.
    rel .'environment_variables'?: common.dictionary

    /// Specifies the list of network connections opened by the process, as a reference to one or more Network Traffic objects.
    ///
    /// The objects referenced in this list MUST be of type `network-traffic`.
    rel .'opened_connection_refs'?: {network-traffic-id}

    /// Specifies the user that created the process, as a reference to a User Account object.
    ///
    /// The object referenced in this property MUST be of type user-account.
    rel .'creator_user_ref'?: user-account-id

    /// Specifies the executable binary that was executed as the process image, as a reference to a File object.
    ///
    /// The object referenced in this property MUST be of type file.
    rel .'image_ref'?: file-id

    /// Specifies the other process that spawned (i.e. is the parent of) this one, as a reference to a Process object.
    ///
    /// The object referenced in this property MUST be of type `process`.
    // FIXME: Mirror with child_refs?
    rel .'parent_ref'?: process-id

    /// Specifies the other processes that were spawned by (i.e. children of) this process, as a reference to one or more other Process objects.
    ///
    /// The objects referenced in this list MUST be of type process.
    rel .'child_refs'?: {process-id}
)

/// The Software object represents high-level properties associated with software, including software products.
def software (
    rel .is: stix_cyber_observable_object
    rel .'type': 'software'
    rel .'id'(rel .gen: auto)|id: software-id

    /// Specifies the name of the software.
    rel .'name': common.string

    /// Specifies the Common Platform Enumeration (CPE) entry for the software, if available.
    /// The value for this property MUST be a CPE v2.3 entry from the official NVD CPE Dictionary [NVD].
    ///
    /// While the CPE dictionary does not contain entries for all software, whenever it does contain an identifier for a given instance of software, this property SHOULD be present.
    rel .'cpe'?: common.string

    /// Specifies the languages supported by the software.
    /// The value of each list member MUST be an ISO 639-2 language code [ISO639-2].
    rel .'languages'?: {common.string}

    /// Specifies the name of the vendor of the software.
    rel .'vendor'?: common.string

    /// Specifies the version of the software.
    rel .'version'?: common.string
)

/// The URL object represents the properties of a uniform resource locator (URL).
def url (
    rel .is: stix_cyber_observable_object
    rel .'type': 'url'
    rel .'id'(rel .gen: auto)|id: url-id

    /// Specifies the value of the URL.
    /// The value of this property MUST conform to [RFC3986], more specifically section 1.1.3 with reference to the definition for "Uniform Resource Locator".
    rel .'value': common.url
)

/// The User Account object represents an instance of any type of user account, including but not limited to operating system, device, messaging service, and social media platform accounts.
/// As all properties of this object are optional, at least one of the properties defined below MUST be included when using this object.
def user-account (
    rel .is: stix_cyber_observable_object
    rel .'type': 'user-account'
    rel .'id'(rel .gen: auto)|id: user-account-id

    /// The User Account object defines the following extensions. In addition to these, producers MAY create their own.
    ///
    /// `unix-account-ext`
    ///
    /// Dictionary keys MUST identify the extension type by name.
    ///
    /// The corresponding dictionary values MUST contain the contents of the extension instance.
    // FIXME: Model extensions
    rel .'extensions'?: common.dictionary

    /// Specifies the identifier of the account.
    /// The format of the identifier depends on the system the user account is maintained in, and may be a numeric ID, a GUID, an account name, an email address, etc.
    /// The user_id property should be populated with whatever field is the unique identifier for the system the account is a member of.
    /// For example, on UNIX systems it would be populated with the UID.
    rel .'user_id'?: common.string

    /// Specifies a cleartext credential.
    /// This is only intended to be used in capturing metadata from malware analysis (e.g., a hard-coded domain administrator password that the malware attempts to use for lateral movement) and SHOULD NOT be used for sharing of PII.
    rel .'credential'?: common.string

    /// Specifies the account login string, used in cases where the user_id property specifies something other than what a user would type when they login.
    ///
    /// For example, in the case of a Unix account with user_id 0, the account_login might be “root”. 
    rel .'account_login'?: common.string

    /// Specifies the type of the account.
    ///
    /// This is an open vocabulary and values SHOULD come from the `account-type-ov` vocabulary.
    rel .'account_type'?: ov.account-type-ov

    /// Specifies the display name of the account, to be shown in user interfaces, if applicable.
    ///
    /// On Unix, this is equivalent to the GECOS field.
    rel .'display_name'?: common.string

    /// Indicates that the account is associated with a network service or system process (daemon), not a specific individual.
    rel .'is_service_account'?: boolean

    /// Specifies that the account has elevated privileges (i.e., in the case of root on Unix or the Windows Administrator account).
    rel .'is_privileged'?: boolean

    /// Specifies that the account has the ability to escalate privileges (i.e., in the case of sudo on Unix or a Windows Domain Admin account) 
    rel .'can_escalate_privs'?: boolean

    /// Specifies when the account was created.
    rel .'account_created'?: common.timestamp

    /// Specifies the expiration date of the account.
    rel .'account_expires'?: common.timestamp

    /// Specifies when the account credential was last changed.
    rel .'credential_last_changed'?: common.timestamp

    /// Specifies when the account was first accessed.
    rel .'account_first_login'?: common.timestamp

    /// Specifies when the account was last accessed.
    rel .'account_last_login'?: common.timestamp
)

/// The Windows Registry Value type captures the properties of a Windows Registry Key Value. As all properties of this type are optional, at least one of the properties defined below MUST be included when using this type.
def windows-registry-value-type (
    /// Specifies the name of the registry value. For specifying the default value in a registry key, an empty string MUST be used.
    rel .'name'?: common.string

    /// Specifies the data contained in the registry value.
    rel .'data'?: common.string

    /// Specifies the registry (REG_*) data type used in the registry value.
    ///
    /// The values of this property MUST come from the `windows-registry-datatype-enum` enumeration.
    rel .'data_type'?: ov.windows-registry-datatype-enum
)

/// The Registry Key object represents the properties of a Windows registry key. As all properties of this object are optional, at least one of the properties defined below MUST be included when using this object.
def windows-registry-key (
    rel .is: stix_cyber_observable_object
    rel .'type': 'windows-registry-key'
    rel .'id'(rel .gen: auto)|id: windows-registry-key-id

    /// Specifies the full registry key including the hive.
    ///
    /// The value of the key, including the hive portion, SHOULD be case-preserved.
    /// The hive portion of the key MUST be fully expanded and not truncated; e.g., HKEY_LOCAL_MACHINE must be used instead of HKLM. 
    rel .'key'?: common.string

    /// Specifies the values found under the registry key.
    rel .'values'?: {windows-registry-value-type}

    /// Specifies the last date/time that the registry key was modified.
    rel .'modified_time'?: common.timestamp
    
    /// Specifies a reference to the user account that created the registry key.
    /// The object referenced in this property MUST be of type user-account.
    rel .'creator_user_ref'?: user-account-id

    /// Specifies the number of subkeys contained under the registry key.
    rel .'number_of_subkeys'?: common.integer
)

def x509-v3-extensions-type(
    /// Specifies a multi-valued extension which indicates whether a certificate is a CA certificate.
    /// The first (mandatory) name is CA followed by TRUE or FALSE. If CA is TRUE, then an optional pathlen name followed by a non-negative value can be included. Also equivalent to the object ID (OID) value of 2.5.29.19.
    rel .'basic_constraints'?: common.string

    /// Specifies a namespace within which all subject names in subsequent certificates in a certification path MUST be located. Also equivalent to the object ID (OID) value of 2.5.29.30.
    rel .'name_constraints'?: common.string

    /// Specifies any constraints on path validation for certificates issued to CAs. Also equivalent to the object ID (OID) value of 2.5.29.36.
    rel .'policy_constraints'?: common.string

    /// Specifies a multi-valued extension consisting of a list of names of the permitted key usages. Also equivalent to the object ID (OID) value of 2.5.29.15.
    rel .'key_usage'?: common.string

    /// Specifies a list of usages indicating purposes for which the certificate public key can be used for. Also equivalent to the object ID (OID) value of 2.5.29.37
    rel .'extended_key_usage'?: common.string

    /// Specifies the identifier that provides a means of identifying certificates that contain a particular public key. Also equivalent to the object ID (OID) value of 2.5.29.14.
    rel .'subject_key_identifier'?: common.string

    /// Specifies the identifier that provides a means of identifying the public key corresponding to the private key used to sign a certificate. Also equivalent to the object ID (OID) value of 2.5.29.35.
    rel .'authority_key_identifier'?: common.string

    /// Specifies the additional identities to be bound to the subject of the certificate. Also equivalent to the object ID (OID) value of 2.5.29.17.
    rel .'subject_alternative_name'?: common.string

    /// Specifies the additional identities to be bound to the issuer of the certificate. Also equivalent to the object ID (OID) value of 2.5.29.18.
    rel .'issuer_alternative_name'?: common.string

    /// Specifies the identification attributes (e.g., nationality) of the subject. Also equivalent to the object ID (OID) value of 2.5.29.9.
    rel .'subject_directory_attributes'?: common.string

    /// Specifies how CRL information is obtained. Also equivalent to the object ID (OID) value of 2.5.29.31.
    rel .'crl_distribution_points'?: common.string

    /// Specifies the number of additional certificates that may appear in the path before anyPolicy is no longer permitted. Also equivalent to the object ID (OID) value of 2.5.29.54.
    rel .'inhibit_any_policy'?: common.string

    /// Specifies the date on which the validity period begins for the private key, if it is different from the validity period of the certificate. 
    rel .'private_key_usage_period_not_before'?: common.string

    /// Specifies the date on which the validity period ends for the private key, if it is different from the validity period of the certificate. 
    rel .'private_key_usage_period_not_after'?: common.string

    /// Specifies a sequence of one or more policy information terms, each of which consists of an object identifier (OID) and optional qualifiers.
    /// Also equivalent to the object ID (OID) value of 2.5.29.32.
    rel .'certificate_policies': common.string

    /// Specifies one or more pairs of OIDs; each pair includes an issuerDomainPolicy and a subjectDomainPolicy.
    /// The pairing indicates whether the issuing CA considers its issuerDomainPolicy equivalent to the subject CA's subjectDomainPolicy.
    /// Also equivalent to the object ID (OID) value of 2.5.29.33.
    rel. 'policy_mappings': common.string
)

/// The X.509 Certificate object represents the properties of an X.509 certificate, as defined by ITU recommendation X.509 [X.509].
/// An X.509 Certificate object MUST contain at least one property (other than type) from this object.
def x509-certificate(
    rel .is: stix_cyber_observable_object
    rel .'type': 'x509-certificate'
    rel .'id'(rel .gen: auto)|id: x509-certificate-id

    /// Specifies whether the certificate is self-signed, i.e., whether it is signed by the same entity whose identity it certifies.
    rel .'is_self_signed'?: boolean

    /// Specifies any hashes that were calculated for the entire contents of the certificate.
    /// Dictionary keys MUST come from the hash-algorithm-ov.
    // Fixme: typed dictionary?
    rel .'hashes': common.hashes

    /// Specifies the version of the encoded certificate.
    rel .'version'?: common.string

    /// Specifies the unique identifier for the certificate, as issued by a specific Certificate Authority.
    rel .'serial_number'?: common.string

    /// Specifies the name of the algorithm used to sign the certificate.
    rel .'signature_algorithm'?: common.string

    /// Specifies the name of the Certificate Authority that issued the certificate.
    rel .'issuer'?: common.string

    /// Specifies the date on which the certificate validity period begins.
    rel .'validity_not_before'?: common.timestamp

    /// Specifies the date on which the certificate validity period ends.
    rel .'validity_not_after'?: common.timestamp

    /// Specifies the name of the entity associated with the public key stored in the subject public key field of the certificate.
    rel .'subject'?: common.string

    /// Specifies the name of the algorithm with which to encrypt data being sent to the subject.
    rel .'subject_public_key_algorithm'?: common.string

    /// Specifies the modulus portion of the subject’s public RSA key.
    rel .'subject_public_key_modulus'?: common.string

    /// Specifies the exponent portion of the subject’s public RSA key, as an integer.
    rel .'subject_public_key_exponent'?: common.string

    /// Specifies any standard X.509 v3 extensions that may be used in the certificate. 
    rel .'x509_v3_extensions'?: x509-v3-extensions-type
)

def relationship (
    rel .is: stix_relationship_object
    rel .'type': 'relationship'
    rel .'id'(rel .gen: auto)|id: relationship-id

    /// The name used to identify the type of Relationship.
    /// This value SHOULD be an exact value listed in the relationships for the source and target SDO, but MAY be any string.
    /// The value of this property MUST be in ASCII and is limited to characters a–z (lowercase ASCII), 0–9, and hyphen (-).
    rel .'relationship_type': common.string

    /// A description that provides more details and context about the Relationship, potentially including its purpose and its key characteristics.
    rel .'description'?: common.string

    /// The id of the source (from) object. The value MUST be an ID reference to an SDO or SCO (i.e., it cannot point to an SRO, Bundle, Language Content, or Marking Definition).
    rel .'source_ref': sdo_sco_identifier

    /// The id of the target (to) object. The value MUST be an ID reference to an SDO or SCO (i.e., it cannot point to an SRO, Bundle, Language Content, or Marking Definition).
    rel .'target_ref': sdo_sco_identifier

    /// This optional timestamp represents the earliest time at which the Relationship between the objects exists.
    /// If this property is a future timestamp, at the time the start_time property is defined, then this represents an estimate by the producer of the intelligence of the earliest time at which relationship will be asserted to be true.
    ///
    /// If it is not specified, then the earliest time at which the relationship between the objects exists is not defined.
    rel .'start_time'?: common.timestamp

    /// The latest time at which the Relationship between the objects exists.
    /// If this property is a future timestamp, at the time the stop_time property is defined, then this represents an estimate by the producer of the intelligence of the latest time at which relationship will be asserted to be true.
    ///
    /// If start_time and stop_time are both defined, then stop_time MUST be later than the start_time value.
    ///
    /// If stop_time is not specified, then the latest time at which the relationship between the objects exists is either not known, not disclosed, or has no defined stop time.
    rel .'stop_time'?: common.timestamp
)
