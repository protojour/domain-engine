domain 01J5C5GB45Q3C0E4YYRPP8SN4R (
    rel. name: 'stix_common'
)

/// The string data type represents a finite-length string of valid characters from the Unicode coded character set [ISO10646]. Unicode incorporates ASCII and the characters of many other international character sets.
///
/// The JSON MTI serialization uses the JSON String type [RFC8259], which mandates the UTF-8 encoding for supporting Unicode.
/// 
/// Examples
/// ```
/// {
///   ...
///   "name": "The Black Vine Cyberespionage Group",
///   ...
/// }
/// ```
def string (
    rel* is: ontol.text
)

def spec_version (
    rel* is?: '2.0'
    rel* is?: '2.1'
)

// placeholder for ONTOL dictionary
def dictionary ()

// FIXME: should maybe be defined in ONTOL_PKG?
def url (
    rel* is: ontol.text
)

/// The integer data type represents a whole number. Unless otherwise specified, all integers MUST be capable of being represented as a signed 54-bit value ([-(2**53)+1, (2**53)-1]) as defined in [RFC7493].
/// Additional restrictions MAY be placed on the type as described where it is used. The integer size is limited to a 54-bit value not a 64-bit value as per the RFC.
///
/// In the JSON MTI serialization, integers are represented by the JSON Number type [RFC7493].
def integer (
    rel* is: i64
)

/// The timestamp type defines how dates and times are represented in STIX.
///
/// The JSON MTI serialization uses the JSON String type [RFC8259] when representing timestamp.
def timestamp (
    rel* is: datetime
)

/// The hex data type encodes an array of octets (8-bit bytes) as hexadecimal.
/// The string MUST consist of an even number of hexadecimal characters, which are the digits '0' through '9' and the lower-case letters 'a' through 'f'.
/// In order to allow pattern matching on custom objects, for all properties that use the hex type, the property name MUST end with '_hex'.
def hex (
    rel* is: octets
    rel* is: ontol.format.hex
)

/// A language code conformant to [RFC5646](https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#kix.1js008hntuzu).
def lang-rfc5646(
    rel* is: string
)

/// The `confidence` property identifies the confidence that the creator has in the correctness of their data. The confidence value **MUST** be a number in the range of 0-100.
def confidence (
    rel* is: integer
    rel* min: 0
    rel* max: 100
)

/// The `Hashes` type represents one or more cryptographic hashes, as a special set of key/value pairs.
/// Accordingly, the name of each hashing algorithm MUST be specified as a key in the dictionary and **MUST** identify the name of the hashing algorithm used to generate the corresponding value.
/// This name **SHOULD** come from one of the values defined in the `hash-algorithm-ov` open vocabulary.
///
/// Dictionary keys **MUST** be unique in each hashes property, **MUST** be in ASCII, and are limited to the characters a-z (lowercase ASCII), A-Z (uppercase ASCII), numerals 0-9, hyphen (-), and underscore (_).
/// Dictionary keys MUST have a minimum length of 3 ASCII characters and MUST be no longer than 250 ASCII characters in length.
/// The value MUST be a `string` in the appropriate format defined by the hash type indicated in the dictionary key.
///
/// To enhance compatibility, the SHA-256 hash `SHOULD` be used whenever possible.
///
/// ## Examples
/// _SHA-256_ and _User-Defined Hash_
///
/// ```json
/// {
///     "SHA-256": "6db12788c37247f2316052e142f42f4b259d6561751e5f401a1ae2a6df9c674b",
///     "x_foo_hash": "aaaabbbbccccddddeeeeffff0123457890"
/// }
/// ```
def hashes (
    // FIXME: Dictionary support:
    // rel* /(a-zA-Z0-9-_){3,250}/: string
)

/// External references are used to describe pointers to information represented outside of STIX.
///
/// For example, a Malware object could use an external reference to indicate an ID for that malware in an external database or a report could use references to represent source material.
def external-reference (
    /// The name of the source that the external-reference is defined within (system, registry, organization, etc.).
    rel* 'source_name': string

    /// A human readable description.
    rel* 'description'?: string

    /// A URL reference to an external resource [[RFC3986](https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#kix.vaucl8w7ov0y)].
    rel* 'url'?: url

    /// Specifies a dictionary of hashes for the contents of the **url**. This **SHOULD** be provided when the **url** property is present.
    ///
    /// Dictionary keys **MUST** come from one of the entries listed in the `hash-algorithm-ov` open vocabulary.
    ///
    /// As stated in Section [2.7](https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_odoabbtwuxyd), to ensure interoperability, a SHA-256 hash **SHOULD** be included whenever possible.
    rel* 'hashes'?: hashes

    /// An identifier for the external reference content.
    rel* 'external_id'?: string
)

/// The `kill-chain-phase` represents a phase in a kill chain, which describes the various phases an attacker may undertake in order to achieve their objectives.
def kill-chain-phase (
    /// The name of the kill chain.
    /// The value of this property **SHOULD** be all lowercase and **SHOULD** use hyphens instead of spaces or underscores as word separators.
    rel* 'kill_chain_name': string

    /// The name of the phase in the kill chain.
    /// The value of this property **SHOULD** be all lowercase and **SHOULD** use hyphens instead of spaces or underscores as word separators.
    rel* 'phase_name': string
)

/// The Statement marking type defines the representation of a textual marking statement (e.g., copyright, terms of use, etc.) in a definition.
/// The value of the definition_type property MUST be statement when using this marking type. Statement markings are generally not machine-readable, and this specification does not define any behavior or actions based on their values.
def marking-object (
    /// A Statement (e.g., copyright, terms of use) applied to the content marked by this marking definition.
    rel* 'statement': string
)

/// The binary data type represents a sequence of bytes. In order to allow pattern matching on custom objects, for all properties that use the binary type, the property name MUST end with '_bin'.
///
/// The JSON MTI serialization represents this as a base64-­encoded string as specified in
/// [RFC4648](https://docs.google.com/document/d/1fWHWyo9OBOUVDKEs0HsMKIWqR8HTl3P8aDyM5Mz3iSM/edit#bookmark=id.w5obc8apb1tn)​.
/// Other serializations SHOULD use a native binary type, if available.
def binary (
    rel* is: octets
    rel* is: ontol.format.base64
)
