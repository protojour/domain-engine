use 'geojson' as geo
use 'melkeruta' as melk

def Mode (
    rel .is?: 'walk'
    rel .is?: 'tram'
)

def Location (
    /// name of the location
    rel .'name': text
    /// geographical coordinates
    rel .'coordinates': geo.Point
    /// public transport stop, if applicable
    rel .'stop_place'?: melk.StopPlace
)

def TripSegment (
    /// mode of transportation
    rel .'mode': Mode
    /// start location
    rel .'from': Location
    /// end location
    rel .'to': Location
    /// geographical route
    rel .'route': geo.LineString
    /// public transport line used, if applicable
    rel .'line'?: melk.Line
    /// distance covered
    rel .'distance': i64
    /// estimated duration
    rel .'duration': i64
    /// estimated start time
    rel .'start_time': datetime
    /// estimated end time
    rel .'stop_time': datetime
)

def TripAlternative (
    /// total distance of the trip, in meters
    rel .'distance': i64
    /// total duration of the trip, in minutes
    rel .'duration': i64
    /// summed distance of walking segments, in meters
    rel .'transfer_distance': i64
    /// summed duration of walking segments, in minutes
    rel .'transfer_time': i64
    /// total wait time, in minutes
    rel .'wait_time': i64
    /// estimated start time for the `from` Location
    rel .'start_time': datetime
    /// estimated arrival time for the `to` Location
    rel .'stop_time': datetime
    /// ordered list of trip segments
    rel .'segments': [TripSegment]
)

def Trip (
    /// start location
    rel .'from': Location
    /// end location
    rel .'to': Location
    /// trip alternatives
    rel .'alternatives': [TripAlternative]
)

map trip_search(
    (
        'start_time'?: start_time,
        'arrive_by'?: end_time,
        'walking_speed'?: speed,
    ),
    trip: Trip
)
