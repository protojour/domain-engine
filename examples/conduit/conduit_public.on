
def username (rel .is: text)
def article_slug (rel .is: text)

def User (
    rel .'email'|id: (rel .is: text)
    rel .'username': text
    rel .'bio': text
    rel .'image'?: text
)

def Profile (
    rel .'username'|id: username
    rel .'bio': text
    rel .'image'?: text
    rel .'following': boolean
)

def Article (
    rel .'slug'|id: article_slug
    rel .'title': text
    rel .'description': text
    rel .'body': text
    rel .'createdAt': datetime
    rel .'updatedAt': datetime
    rel .'favorited': boolean
    rel .'favoritesCount': i64
    rel .'author': Profile
)

def Comment (
    rel .'id'|id: (rel .is: i64)
    rel .'createdAt': datetime
    rel .'updatedAt': datetime
    rel .'body': text
    rel .'author': Profile
)

def SingleArticle (
    rel .'article': Article
)

def MultipleArticles (
    rel .'articles': {Article}
    rel .'articlesCount': i64
)

def SingleComment (
    rel .'comment': Comment
)

def MultipleComments (
    rel .'comments': {Comment}
)

def Tags (
    rel .'tags': {text}
)

def ArticleFilter (
    rel .'slug'?: article_slug
    // NB: These must be a sets, not lists:
    rel .'tag'?: {text}
    rel .'author'?: {username}
    rel .'favorited'?: {username}
    rel .'limit'?: i64
    rel .'offset'?: i64
)

// endpoint '/api/articles/:slug'
map article(
    article_slug: slug,
    SingleArticle(
        'article': ArticleFilter(
            'slug'?: slug
        )
    )
)

// endpoint '/api/articles'
map articles(
    ArticleFilter: filter, // ERROR expected named property
    MultipleArticles(
        // The idea is that ArticleFilter can map to many db.Articles,
        // and each db.Article maps to one public.Article.
        'articles': {..filter}, // ERROR TODO: Incompatible aggregation group// ERROR TODO: unable to loop
        'articlesCount': 0 // e.g. `length filter`
    )
)
