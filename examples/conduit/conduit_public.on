
def username { rel .is: string }
def article_slug { rel .is: string }

pub def User {
    rel .'email'|id: { rel .is: string }
    rel .'username': string
    rel .'bio': string
    rel .'image'?: string
}

pub def Profile {
    rel .'username'|id: username
    rel .'bio': string
    rel .'image'?: string
    rel .'following': boolean
}

pub def Article {
    rel .'slug'|id: article_slug
    rel .'title': string
    rel .'description': string
    rel .'body': string
    rel .'createdAt': datetime
    rel .'updatedAt': datetime
    rel .'favorited': boolean
    rel .'favoritesCount': i64
    rel .'author': Profile
}

pub def Comment {
    rel .'id'|id: { rel .is: i64 }
    rel .'createdAt': datetime
    rel .'updatedAt': datetime
    rel .'body': string
    rel .'author': Profile
}

pub def SingleArticle {
    rel .'article': Article
}

pub def MultipleArticles {
    rel .'articles': [Article]
    rel .'articlesCount': i64
}

pub def SingleComment {
    rel .'comment': Comment
}

pub def MultipleComments {
    rel .'comments': [Comment]
}

pub def Tags {
    rel .'tags': [string]
}

def ArticleFilter {
    rel .'slug'?: article_slug
    // NB: These must be a sets, not lists:
    rel .'tag'?: [string]
    rel .'author'?: [username]
    rel .'favorited'?: [username]
    rel .'limit'?: i64
    rel .'offset'?: i64
}

map {
    query { // ERROR type not found
        GET: '/api/articles/:slug'
        'slug': slug
    }
    SingleArticle {
        'article': ArticleFilter {
            'slug': slug
        }
    }
}

map {
    query { // ERROR type not found
        GET: '/api/articles'
        'tag': [t]
        'author': [a]
        'favorited': [f]
        'limit': limit
        'offset': offset
    }
    MultipleArticles {
        'articles': ArticleFilter {
            'tag': [t]
            'author': [a]
            'favorited': [f]
            'limit': limit
            'offset': offset
        }
    }
}
