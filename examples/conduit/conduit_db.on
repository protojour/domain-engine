pub type user_id { rel .is: uuid }
pub type slug { rel.is: string }
pub type tag { rel.is: string }

pub type User {
    rel .'user_id'(rel .gen: auto)|id: user_id
    rel .'username': string
    rel .'email': string
    rel .'password_hash': string
    rel .'bio'(rel .default := ''): string
    rel .'image'?: string

    // TODO(constraint): User cannot follow itself
    rel .'following'::'followed_by'? [User]
}

pub type Article {
    rel .'article_id'(rel .gen: auto)|id: { rel .is: uuid }
    // TODO(constraint): slug is unique
    rel .'slug': slug
    rel .'title': string
    rel .'description': string
    rel .'body': string
    // TODO: Make these required generated properties:
    rel .'createdAt'(rel .gen: create_time)?: datetime
    rel .'updatedAt'(rel .gen: update_time)?: datetime
}

pub type Comment {
    rel .'id'(rel .gen: auto)|id: { rel .is: int }
    rel .'body': string
    // TODO: Make these required generated properties:
    rel .'createdAt'(rel .gen: create_time)?: datetime
    rel .'updatedAt'(rel .gen: update_time)?: datetime
}

pub type TagEntity {
    rel .'tag'(rel .gen: auto)|id: tag
}

rel [Article] 'author'::'authored_articles'? User
rel Article 'favorited_by'::'favorited'? [User]
rel [TagEntity] 'tagged'::'tags'? [Article]
rel [Comment] 'comment_on'::'comments'? Article
rel [Comment] 'author'::'authored_comments'? User
