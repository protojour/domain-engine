/// The `conduit` database persistence layer for an example blogging platform.
///
/// A "RealWorld" implementation, see https://realworld-docs.netlify.app/
domain 01GZQ1ZRW0WJR72GHM6VWRMFES (
    rel. name: 'conduit_db'
)

def user_id (rel* is: uuid)
def slug (rel* is: text)
def tag (rel* is: text)

def User (
    // TODO: This must be an Authly user id
    rel. 'user_id'[rel* gen: auto]: user_id
    // TODO: This is.. an authly user name? Maybe?
    rel* 'username': text

    // TODO: Should not store auth-related fields in Memoriam,
    // this is the responsibility of Authly.
    rel* 'email': text
    rel* 'password_hash': text

    rel* 'bio'[rel* default := '']: text
    rel* 'image'?: text

    // TODO(constraint): User cannot follow itself
    rel* follow.following?: {User}
    rel* follow.followed_by?: {User}

    rel* fav.favorited?: {Article}

    rel* article_authorship.authored_articles?: {Article}
    rel* comment_authorship.authored_comments?: {Comment}
)

def Article (
    rel. 'article_id'[rel* gen: auto]: (rel* is: uuid)
    // TODO(constraint): slug is unique
    rel* 'slug': slug
    rel* 'title': text
    rel* 'description': text
    rel* 'body': text
    rel* 'created_at'[rel* gen: create_time]: datetime
    rel* 'updated_at'[rel* gen: update_time]: datetime

    rel* tagging.tags?: {TagEntity}
    rel* fav.favorited_by: {User}
    rel* commentary.comments?: {Comment}
    rel* article_authorship.author: User

    rel* order[rel* 0: 'title']: alphabetical
    rel* order[
        rel* 0: 'created_at'
        rel* direction: descending
    ]: by_date
)

def Comment (
    rel. 'id'[rel* gen: auto]: (rel* is: serial)
    rel* 'body': text
    rel* 'created_at'[rel* gen: create_time]: datetime
    rel* 'updated_at'[rel* gen: update_time]: datetime

    rel* commentary.comment_on?: Article
    rel* comment_authorship.author: User
)

def TagEntity (
    rel. 'tag': tag
    rel* tagging.tagged: {Article}
)

arc fav {
    (user) favorited: (art),
    (art) favorited_by: (user),
}

arc follow {
    (follower) following: (followee),
    (followee) followed_by: (follower),
}

arc article_authorship {
    (article) author: (author),
    (author) authored_articles: (article),
}

arc commentary {
    (art) comments: (c),
    (c) comment_on: (art),
}

arc comment_authorship {
    (comment) author: (author),
    (author) authored_comments: (comment),
}

arc tagging {
    (article) tags: (tag),
    (tag) tagged: (article),
}

sym {
    /// An ordering by date
    by_date,

    /// An alphabetical ordering
    alphabetical,
}

map users (
    (),
    User { ..@match User() }
)

map articles (
    (),
    Article { ..@match Article() }
)
