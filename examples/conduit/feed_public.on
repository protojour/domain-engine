use 'conduit_db' as db

/// An RRS-like channel
def channel (
    rel .'title': text
    rel .is: channel_base
)

def @private channel_base (
    rel .'link': text
    rel .'username': text
    rel .'items': {item}
)

/// An item in the channel
def item (
    rel .'guid'?: uuid
    rel .'title': text
)

map(
    item(
        'guid'?: id,
        'title': t,
    ),
    @match db.Article(
        // BUG: Don't want this to be optional.
        // it's clearly a mapping from top to bottom, and then it will come from the data store
        'article_id'?: id,
        'title': t,
    ),
)

/// This expresses the mapping direction between these types:
map @abstract(channel(), channel_base())

/// The actual mapping logic is outsourced to a hook
def @extern channel_hook (
    rel .'url': 'http://localhost:8080/map_channel'
    map(channel_base(), channel())
)

map feed(
    (
        'username': username
    ),
    channel(
        channel_base(
            'username': username,
            'link': /http:\/\/blogs\.com\/(?<username>\w+)\/feed/,
            'items': {
                ..@match db.Article(
                    'author': db.User (
                        'username': username,
                    ),
                    order: db.by_date()
                )
            }
        )
    )
)
